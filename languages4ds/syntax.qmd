# Syntax를 비교해보자

## 왜 어러가지 문법들이 있을까?

컴퓨터 프로그래밍을 배우게 되면 여러가지 문법(syntax)를 배우게 됩니다. 
왜 이런 문법들이 있는가 생각해 보면 결국에는 사람이 이해하기 쉽게 하기 위함입니다. 

아폴로 탐사 계획에서 연산을 위해서 사람의 키 만큼의 책으로 인쇄될 만큼 코드를 짜야 했다고 합니다. 여러가지 이유가 있겠지만, 그 당시에는 기계어 혹은 Assembly로 코드를 짜야 했기 때문일 것입니다. 현대 언어에서 도입된 여러가지 문법이 없었기에 반복해서 많은 것들을 적어야 했을 것입니다.  

현대적인 프로그래밍 언어로 개발 한다면 아마 10분의 1로 줄어든 분량, 어쩌면 더 적게 만들 수 있었을지도 모릅니다. 

그렇게 줄어든 분량은 사람들이 더 적은 분량을 작성하고 고려하게 되어 사람들이 더 잘 이해하고 더 복잡한 내용을 만들 수 있게 된 것입니다.

그렇다면 세 가지 언어에서 공통적으로 보이면서 필수적인 문법들을 살펴보도록 하겠습니다.

## 정수(Integer), 부동소수점(Float), 문자열(String)

컴퓨터는 이진수로 되어 있어 정수만 표현이 가능합니다.
다만, 부동소수점 연산을 통해서 실수를 일정 정확도로 근사하고 있습니다.
(종종 너무 큰 수를 다뤄야 할 경우 실수와 다름을 경험할 수 있습니다.)

사람은 숫자 `2`와 `2.0`을 같다고 보지만, 컴퓨터 입장에서는 하나는 정수(Integer)이고 하나는 Float입니다.
타입이 다르기에 이 두가지를 분리해서 보게 됩니다만, 많은 고수준 언어에서는 어느정도 사람이 생각하는 것과 비슷하게 자동으로 처리하게 됩니다.

이 부분은 Computer Science 측면에서는 중요하지만, 지금은 타입이라는 것이 있따는 것만 기억하고 넘어가도 무방할 것 같습니다.

한가지 기억해야 할 것은 문자열 1과 숫자 1이 다르다는 것입니다.
1 + '1'은 사람이라면 2라고 말할 수도 있겠지만, 컴퓨터 입장에서는 서로 다른 타입을 더하는 것으로 보이기에 계산이 이루어지지 않고 에러를 반환하게 됩니다.

이런 타입이 있어서 작업을 할 때 타입을 신경 써야 합니다.

## 연산

### 할당(assign)하기

프로그래밍을 할 때 가장 많이 하는 것 중 하나는 할당이라고 생각합니다.
계산해 보진 않았지만 아마 가장 많이 등장 할 겁니다.

할당이라는 표현은 어색하긴 하지만, 이름을 붙인 상자 같은 것에 실행시킨 결과를 집어 넣는 것과 유사합니다.
내가 작성한 코드의 실행 결과를 내가 이름 붙여 다른 곳에서 사용할 수 있게 하는 것입니다.

::: {.panel-tabset}

#### Python

python은 `=`를 사용해서 이름에 값을 할당합니다.

```{python}
foo = 1
print(foo)
```

#### Julia

Julia는 `=`를 사용해서 이름에 값을 할당합니다.
(줄리아에서 `;`를 각 코드 끝에 붙여서 출력이 되지 않게 할 수 있습니다.)
```{julia}
#| echo: true
foo = 1;
print(foo)
```

####  R 

R은 `<-` 또는 `=`를 사용해서 이름에 값을 할당합니다.

`<-`을 사용하는 것이 일반적입니다.
```{r}
foo <- 1
print(foo)
```

`=`은 Top Level 환경에서만 사용할 수 있습니다.

```{r}
foo = 1
print(foo)
```
:::

할당할 때 `=`를 사용했기에 같은지를 비교를 할 때 `==`를 사용하는 것이 일종의 전통처럼 내려오고 있습니다. 따라서 R은 `=`를 할당에 사용하지 않음에도 `==`를 통해 비교하게 된 것으로 보입니다.

### 사칙연산

사칙연산에 대한 기호는 세 언어가 동일합니다.
단, 화면에 출력할 때 방식은 언어별로 다소 차이가 있습니다. 

::: {.panel-tabset}

#### Python

```{python}
addition = 3 + 2
substraction = 3 - 2
multiplication = 3 * 2
division = 3 / 2

print(addition, substraction, multiplication, division, sep="\n")

```

#### Julia 

`seperator`를 별도로 지정할 수 없어 직접 문자열을 만들어야 합니다.

```{julia}
addition = 3 + 2
substraction = 3 - 2
multiplication = 3 * 2
division = 3 / 2

println(join([addition, substraction, multiplication, division], "\n"))

```
#### R

`cat`이란 함수를 사용하여 표시할 수 있습니다.

```{r}
addition = 3 + 2
substraction = 3 - 2
multiplication = 3 * 2
division = 3 / 2

cat(addition, substraction, multiplication, division, sep="\n")
```

:::

### 수학연산 with 문자열(string)

문자열을 더하면 어떤 일이 발생할까요?
언어별로 차이를 봅시다.

::: {.panel-tabset}

#### 파이썬

파이썬에서는 두 문자열을 더하거나 문자열을 정수로 곱할 수 있습니다.

```{python}
foo = "foo"
bar = "bar"
print(foo + bar)
```

```{python}
foo = "foo"
bar = "bar"
print(foo * 3)
```

#### Julila

줄리아에서 두 문자열을 곱하면 두 문자열을 연결한 것과 같은 결과를 얻을 수 있습니다.

```{julia}
foo = "foo"
bar = "bar"
println(foo * bar)
```

Julia에서 두 문자열을 붙이는 효과가 있었고 나머지 언어에서는 불가능 했습니다.

그러면 숫자에 문자열을 곱하면 어떻게 될까요?


#### R

R에서는 문자열에 대한 사칙연산이 정의된 것이 없습니다.

:::


### 몫과 나머지

::: {.panel-tabset}
#### Python

파이썬에서 몫은 `//`을 써서 계산합니다.

```{python}
11 // 4
```

파이썬에서 나머지는 `%`를 사용해서 계산할 수 있습니다.
```{python}
11 % 4
```

`divmod`함수를 사용해서 나머지와 몫을 한번에 구할 수도 있습니다.

```{python}
divmod(11, 4)
```


#### Julia

Julia에서 몫을 구하는 건 `÷`기호를 써서 사용이 가능합니다. 

`÷`기호는 Julia REPL에서 `\div`라고 입력한 뒤 tab을 누르면 변환이 됩니다. 

Julia는 다른 언어와 다르게 Unicode를 사용할 수 있어 이모지 같은 특수 문자 사용이 가능합니다.

```{julia}
11 ÷ 4
```

#### R

R에서는 몫을 구하는 건 `%/%`을 써서 구할 수 있습니다.

```{r}
11 %/% 4
```

몫을 구하려고 한다면 `%%`을 사용하면 됩니다.

```{r}
11 %% 4
```

:::

### 거듭제곱

거듭제곱을 정의하는 방식을 확인해 봅시다.

::: {.panel-tabset}

#### 파이썬

파이썬에서는 `**`를 써서 거듭제곱을 하거나 `numpy`또는 `math`라는 패키지를 사용해서 계산합니다.

```{python}
2 ** 2
```

```{python}
2 ** (1/2)
```

```{python}
import math
math.pow(2, 1/2)
```

```{python}
import numpy as np
np.power(2, 1/2)
```


#### Julila

줄리아에서는 `^`을 사용해서 만들 수 있습니다.

```{julia}
2 ^ (1/2)
```


#### R

R에서는 문자열에 `**`나 `^`를 사용해서 구할 수 있습니다.

```{r}
2 ^ (1/2)
```
```{r}
2 ** (1/2)
```
:::

### 비교 연산자

> < >= <=

### 논리 연산

and or xor

## 문자열 다루기

### 결합

### 분리

## 조건문

## 순환문

## 함수 

## 데이터 분석 프로세스가 무엇인지 알고 어떻게 그것을 각 언어에서 해보는지 정리해 보자.