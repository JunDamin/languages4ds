[
  {
    "objectID": "posts/how_to_install_python_package_under_offline_enviromnent/index.html",
    "href": "posts/how_to_install_python_package_under_offline_enviromnent/index.html",
    "title": "오프라인에서 패키지 설치하기",
    "section": "",
    "text": "인터넷이 연될되지 않은 상황에서 파이썬 패키지를 설치하고자 할 때 알아두어야 할 것을 정리해 보고자 한다."
  },
  {
    "objectID": "posts/how_to_install_python_package_under_offline_enviromnent/index.html#패키지를-받기",
    "href": "posts/how_to_install_python_package_under_offline_enviromnent/index.html#패키지를-받기",
    "title": "오프라인에서 패키지 설치하기",
    "section": "패키지를 받기",
    "text": "패키지를 받기\npypi에서 whl 하나를 받을 순 있긴 한데 관련된 패키지가 없으면 결국 작동이 안된다. pip download {{패키지 이름}} 형식으로 작성하면 된다.\n단 운영하고자 하는 OS에서 가동이 가능한 파일을 받아야 한다."
  },
  {
    "objectID": "posts/how_to_install_python_package_under_offline_enviromnent/index.html#패키지-파일을-옮기기",
    "href": "posts/how_to_install_python_package_under_offline_enviromnent/index.html#패키지-파일을-옮기기",
    "title": "오프라인에서 패키지 설치하기",
    "section": "패키지 파일을 옮기기",
    "text": "패키지 파일을 옮기기\n패키지 파일을 설치하고자 하는 컴퓨터로 옮겨야 한다. 이 부분은 망분리 방식에 따라 다르기 때문에 별도로 다루진 않는다."
  },
  {
    "objectID": "posts/how_to_install_python_package_under_offline_enviromnent/index.html#설치하기",
    "href": "posts/how_to_install_python_package_under_offline_enviromnent/index.html#설치하기",
    "title": "오프라인에서 패키지 설치하기",
    "section": "설치하기",
    "text": "설치하기\npip에서 링크 옵션을 지정해서 할 수 있다.\n–no-index옵션과 –find-links옵션을 쓰면 설치할 수 있다.\n패키지 중에서 API wrapper형식으로 된 경우 해당 소프트웨어를 설치해야 한다. altair를 쓰고자 하면 vega를 설치해야 한다.\n예시\npip install --no-index --find-links {패키지가 있는 경로} {설치할 패키지}"
  },
  {
    "objectID": "posts/lineplot_following_economist_visual_guide/index.html",
    "href": "posts/lineplot_following_economist_visual_guide/index.html",
    "title": "Economist 시각화 가이드를 matplotlib에 적용하기",
    "section": "",
    "text": "예시로 사용할 데이터는 한스 로슬링 박사님이 사용하셨던 gap minder 데이터를 사용해보고자 합니다.\n우선 필요한 패키지를 불러옵니다.\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\ngapminder = pd.read_csv(\"https://raw.githubusercontent.com/OHI-Science/data-science-training/master/data/gapminder.csv\")\n\n\n기본 그래프 출력하기\nmatplotlib에서 기본적으로 출력할 수 있는 방식은 다음과 같습니다. seaborn을 쓰면 조금 다르겠지만, 크게 다르지 않습니다.\n\ncountries = ['United Kingdom', 'United States', 'France', 'China', 'Japan', 'Korea Rep.', 'Ghana', 'Somalia', 'South Africa',]\n\ndata = gapminder.loc[gapminder.country.isin(countries)]\nfig, ax = plt.subplots(1, 1)\n\nfor country, df in gapminder.groupby(\"country\"):\n    ax.plot(df[\"year\"], df[\"lifeExp\"], label=country)\n\nplt.show()\n\n\n\n\n보시면 알겠지만, 너무 많은 선이 노출되어 있어서 무엇을 전달하려고 하는지 전달이 되지 않습니다. 전반적으로 기대 수명이 개선 되고 있는 것을 확인할 수 있습니다만, 너무 복잡해서 무엇을 전달하고자 하는지 이해가 되지 않습니다.\n\n\n스타일 적용하기\nEconomist에서 방식은 메시지를 집중하는 방식을 사용합니다.\n앞으로 진행해보고자 하는 것을 정리하자면\n\n비교하고자 하는 자료를 강조하고 그 외의 자료는 간략하게\n세로축과 보조선을 제외하기\n가로선을 설정하기\n태그 넣기\n\n정도 입니다. 아래에 그 방식을 따라하면 됩니다.\n\n# 플롯 설정하기\nfig, ax = plt.subplots(figsize=(8,6))\n\n# 1. 보조선 그리기\n# zorder를 통해서 보여지는 순서를 지정할 수 있습니다.\n\nax.yaxis.set_ticks(range(25, 100, 15))\nax.grid(which=\"major\", axis='y', color='#758D99', alpha=0.6, zorder=1, )\n\n# 불필요한 테두리 제거하기\nax.spines[['top','right','left']].set_visible(False)\n\n# 축 눈금 스타일 조정하기\nax.set_yticklabels(ax.get_yticklabels(),            # Set labels again\n                   ha = 'right',                 # Set horizontal alignment to right\n                   verticalalignment='bottom')   # Set vertical alignment to make labels on top of gridline      \n\n\nax.yaxis.set_tick_params(pad=11,             # Pad tick labels so they don't go over y-axis\n                         labeltop=True,      # Put x-axis labels on top\n                         labelbottom=False,  # Set no x-axis labels on bottom\n                         bottom=False,       # Set no ticks on bottom\n                         labelsize=11)       # Set tick label size\n\nax.xaxis.set_tick_params(labelsize=11)        # Set tick label size\n\n\n# Economist 스타일 넣기\nax.plot([0.12, .9],                  # Set width of line\n        [.98, .98],                  # Set height of line\n        transform=fig.transFigure,   # Set location relative to plot\n        clip_on=False, \n        color='#E3120B', \n        linewidth=.6)\nax.add_patch(plt.Rectangle((0.12,.98),                 # Set location of rectangle by lower left corder\n                           0.04,                       # Width of rectangle\n                           -0.02,                      # Height of rectangle. Negative so it goes down.\n                           facecolor='#E3120B', \n                           transform=fig.transFigure, \n                           clip_on=False, \n                           linewidth = 0))\n\n\n# Plot data\n# Loop through country names and plot each one.\nfor name, df in gapminder.groupby(\"country\"):\n    ax.plot(df['year'], \n            df['lifeExp'], \n            color='#758D99', \n            alpha=0.1, \n            linewidth=3)\n\n# Plot US and China separately\nax.plot(data[data['country'] == 'United States']['year'], \n        data[data['country'] == 'United States']['lifeExp'], \n        color='#006BA2',\n        linewidth=3)\n\nax.plot(data[data['country'] == 'China']['year'], \n        data[data['country'] == 'China']['lifeExp'], \n        color='#DB444B',\n        linewidth=3)\n\n\nax.plot(data[data['country'] == 'Korea Rep.']['year'], \n        data[data['country'] == 'Korea Rep.']['lifeExp'], \n        color='#3EBCD2',\n        linewidth=3)\n\n\n# y 범위 설정하기\nax.set_ylim(25, 100)\n\n# x 범위 설정하기\nax.set_xlim(1952, 2008)\n\n# 레이블 넣기\nax.text(x=.25, y=.63, s='United States', transform=fig.transFigure, size=10, alpha=.9, color=\"#006BA2\")\nax.text(x=.7, y=.52, s='China', transform=fig.transFigure, size=10, alpha=.9, color=\"#DB444B\")\nax.text(x=.2, y=.45, s='Korea Rep.', transform=fig.transFigure, size=10, alpha=.9, color=\"#3EBCD2\")\n\n\n\n# 타이틀과 서브타이틀 넣기\nax.text(x=0.12, y=.91, s=\"Life Expectation\", transform=fig.transFigure, ha='left', fontsize=13, weight='bold', alpha=.8)\nax.text(x=0.12, y=.86, s=\"Various countries, 1952-2007\", transform=fig.transFigure, ha='left', fontsize=11, alpha=.8)\n\n# 출처 넣기\nax.text(x=0.12, y=0.01, s=\"\"\"Source: \"GAP minder\"\"\", transform=fig.transFigure, ha='left', fontsize=9, alpha=.7)\n\nplt.savefig(\"life_exp.png\")\nplt.show()"
  },
  {
    "objectID": "posts/regression_using_jax/index.html",
    "href": "posts/regression_using_jax/index.html",
    "title": "Jax를 사용해서 Regression을 그려 봅시다",
    "section": "",
    "text": "필요한 패키지를 불러옵니다\n\nfrom jax import numpy as jnp\nfrom jax import grad\nimport numpy as np\nfrom plotnine import *\nimport pandas as pd\nfrom tqdm import tqdm\n\n간단한 모형을 만들어 봅니다. X와 y가 2차함수 형태로 결합된 경우를 생각해 봅니다.\n\nn = 100\nX = np.random.uniform(0, 3, size=n)\ny = 3 * np.power(X, 2) + np.random.normal(10, 3, size=n)\n\ndata = pd.DataFrame(zip(X, y), columns=[\"X\", \"y\"])\n(\n    ggplot(data)\n    + aes(\"X\", \"y\")\n    + geom_point()\n)\n\n\n\n\n<ggplot: (8765458345283)>\n\n\n선형 모델을 먼저 생각해 봅니다.\n\nw = {\"a\": 0., \"b\": 0.}\n\n# set model\ndef model(w, X):\n    return w[\"a\"] * X + w[\"b\"]\n\n# set loss\ndef loss(w, model, X, y):\n    return jnp.power(model(w, X) - y, 2).sum()\n\n# grad loss\ndloss = grad(loss)\n\n이제 경사하강법을 활용하여 w를 찾아봅니다.\n경사하강법은 말그대로 경사를 구해서 낮은 쪽으로 이동하게 하는 것입니다.\n기본적인 아이디어는 예측치와 관측값의 차이를 합치는 손실함수(loss function)을 구합니다. 그리고 파라미터를 손실이 줄어드는 방향(경사, 미분해서 보통 구합니다)으로 조금씩 옮겨가면서 최적의 값을 찾아 한발 한발 나아가는 방식입니다.\n수식으로 간단하게 표기해보자면\n로 정의하고 이 을 로 미분해 해당 미분값(경사)를 이용해서 낮추는 방향으로 파라미터 를 바꿔가면서 찾아가는 방식입니다.\n\nrate = 0.0001\n\nlosses = []\nws = []\nfor i in tqdm(range(2000)):\n    l = loss(w, model, X, y)\n    ws.append(w.copy())\n    losses.append(l)\n    dw = dloss(w, model, X, y)\n    for key in w.keys():\n        w[key] -= dw[key]*rate\n\n  0%|          | 0/2000 [00:00<?, ?it/s]\n\n\n  1%|          | 23/2000 [00:00<00:08, 227.81it/s]\n\n\n  2%|▏         | 49/2000 [00:00<00:08, 241.85it/s]\n\n\n  4%|▎         | 74/2000 [00:00<00:07, 245.18it/s]\n\n\n  5%|▍         | 99/2000 [00:00<00:07, 242.35it/s]\n\n\n  6%|▋         | 125/2000 [00:00<00:07, 247.72it/s]\n\n\n  8%|▊         | 151/2000 [00:00<00:07, 251.55it/s]\n\n\n  9%|▉         | 177/2000 [00:00<00:07, 242.55it/s]\n\n\n 10%|█         | 202/2000 [00:00<00:07, 228.65it/s]\n\n\n 11%|█▏        | 228/2000 [00:00<00:07, 236.54it/s]\n\n\n 13%|█▎        | 253/2000 [00:01<00:07, 240.14it/s]\n\n\n 14%|█▍        | 279/2000 [00:01<00:07, 245.16it/s]\n\n\n 15%|█▌        | 305/2000 [00:01<00:06, 249.27it/s]\n\n\n 17%|█▋        | 331/2000 [00:01<00:06, 249.87it/s]\n\n\n 18%|█▊        | 357/2000 [00:01<00:06, 250.01it/s]\n\n\n 19%|█▉        | 383/2000 [00:01<00:06, 251.82it/s]\n\n\n 20%|██        | 410/2000 [00:01<00:06, 255.25it/s]\n\n\n 22%|██▏       | 437/2000 [00:01<00:06, 257.79it/s]\n\n\n 23%|██▎       | 464/2000 [00:01<00:05, 258.90it/s]\n\n\n 24%|██▍       | 490/2000 [00:01<00:05, 255.47it/s]\n\n\n 26%|██▌       | 517/2000 [00:02<00:05, 257.80it/s]\n\n\n 27%|██▋       | 544/2000 [00:02<00:05, 258.93it/s]\n\n\n 29%|██▊       | 571/2000 [00:02<00:05, 259.97it/s]\n\n\n 30%|██▉       | 598/2000 [00:02<00:05, 260.34it/s]\n\n\n 31%|███▏      | 625/2000 [00:02<00:05, 258.61it/s]\n\n\n 33%|███▎      | 652/2000 [00:02<00:05, 259.38it/s]\n\n\n 34%|███▍      | 678/2000 [00:02<00:05, 259.33it/s]\n\n\n 35%|███▌      | 704/2000 [00:02<00:04, 259.22it/s]\n\n\n 36%|███▋      | 730/2000 [00:02<00:05, 247.30it/s]\n\n\n 38%|███▊      | 757/2000 [00:03<00:04, 251.44it/s]\n\n\n 39%|███▉      | 783/2000 [00:03<00:04, 252.11it/s]\n\n\n 40%|████      | 809/2000 [00:03<00:04, 254.02it/s]\n\n\n 42%|████▏     | 836/2000 [00:03<00:04, 256.57it/s]\n\n\n 43%|████▎     | 862/2000 [00:03<00:04, 256.28it/s]\n\n\n 44%|████▍     | 888/2000 [00:03<00:04, 254.10it/s]\n\n\n 46%|████▌     | 915/2000 [00:03<00:04, 257.02it/s]\n\n\n 47%|████▋     | 942/2000 [00:03<00:04, 258.06it/s]\n\n\n 48%|████▊     | 969/2000 [00:03<00:03, 259.07it/s]\n\n\n 50%|████▉     | 995/2000 [00:03<00:03, 259.22it/s]\n\n\n 51%|█████     | 1022/2000 [00:04<00:03, 259.40it/s]\n\n\n 52%|█████▏    | 1048/2000 [00:04<00:03, 259.42it/s]\n\n\n 54%|█████▍    | 1075/2000 [00:04<00:03, 259.72it/s]\n\n\n 55%|█████▌    | 1101/2000 [00:04<00:03, 248.99it/s]\n\n\n 56%|█████▋    | 1126/2000 [00:04<00:03, 227.51it/s]\n\n\n 57%|█████▊    | 1150/2000 [00:04<00:04, 211.19it/s]\n\n\n 59%|█████▊    | 1172/2000 [00:04<00:04, 172.80it/s]\n\n\n 60%|█████▉    | 1191/2000 [00:04<00:04, 175.12it/s]\n\n\n 60%|██████    | 1210/2000 [00:05<00:04, 171.60it/s]\n\n\n 61%|██████▏   | 1228/2000 [00:05<00:04, 172.98it/s]\n\n\n 63%|██████▎   | 1255/2000 [00:05<00:03, 197.54it/s]\n\n\n 64%|██████▍   | 1276/2000 [00:05<00:03, 199.78it/s]\n\n\n 65%|██████▍   | 1297/2000 [00:05<00:03, 201.84it/s]\n\n\n 66%|██████▌   | 1321/2000 [00:05<00:03, 211.93it/s]\n\n\n 67%|██████▋   | 1345/2000 [00:05<00:02, 219.14it/s]\n\n\n 68%|██████▊   | 1368/2000 [00:05<00:03, 209.53it/s]\n\n\n 70%|██████▉   | 1390/2000 [00:05<00:02, 203.44it/s]\n\n\n 71%|███████   | 1411/2000 [00:06<00:04, 142.52it/s]\n\n\n 72%|███████▏  | 1430/2000 [00:06<00:03, 151.15it/s]\n\n\n 72%|███████▏  | 1448/2000 [00:06<00:03, 157.22it/s]\n\n\n 74%|███████▎  | 1473/2000 [00:06<00:02, 180.31it/s]\n\n\n 75%|███████▍  | 1499/2000 [00:06<00:02, 199.49it/s]\n\n\n 76%|███████▋  | 1526/2000 [00:06<00:02, 216.81it/s]\n\n\n 78%|███████▊  | 1553/2000 [00:06<00:01, 229.37it/s]\n\n\n 79%|███████▉  | 1580/2000 [00:06<00:01, 238.71it/s]\n\n\n 80%|████████  | 1605/2000 [00:06<00:01, 239.93it/s]\n\n\n 82%|████████▏ | 1630/2000 [00:07<00:01, 235.01it/s]\n\n\n 83%|████████▎ | 1656/2000 [00:07<00:01, 240.78it/s]\n\n\n 84%|████████▍ | 1682/2000 [00:07<00:01, 244.11it/s]\n\n\n 85%|████████▌ | 1708/2000 [00:07<00:01, 248.07it/s]\n\n\n 87%|████████▋ | 1734/2000 [00:07<00:01, 250.94it/s]\n\n\n 88%|████████▊ | 1761/2000 [00:07<00:00, 254.19it/s]\n\n\n 89%|████████▉ | 1788/2000 [00:07<00:00, 257.02it/s]\n\n\n 91%|█████████ | 1815/2000 [00:07<00:00, 258.42it/s]\n\n\n 92%|█████████▏| 1842/2000 [00:07<00:00, 259.50it/s]\n\n\n 93%|█████████▎| 1869/2000 [00:08<00:00, 260.59it/s]\n\n\n 95%|█████████▍| 1896/2000 [00:08<00:00, 261.41it/s]\n\n\n 96%|█████████▌| 1923/2000 [00:08<00:00, 262.03it/s]\n\n\n 98%|█████████▊| 1950/2000 [00:08<00:00, 262.43it/s]\n\n\n 99%|█████████▉| 1977/2000 [00:08<00:00, 262.49it/s]\n\n\n100%|██████████| 2000/2000 [00:08<00:00, 235.18it/s]\n\n\n\n\n\n\n# overlay plots\nresult_df = pd.DataFrame(zip(X, np.array(model(w, X))), columns=[\"X\", \"f\"])\n(\n    ggplot(data=data) +\n    aes(\"X\", \"y\") +\n    geom_point() +\n    geom_smooth(method=\"lm\") +\n    geom_line(data=result_df, mapping=aes(\"X\", \"f\"),  color=\"#ff1234\")\n    \n)\n\n\n\n\n<ggplot: (8765489684197)>\n\n\n\ndfs = [pd.DataFrame(zip(map(int, np.ones_like(X)*i), X, np.array(model(ws[i], X))), columns=[\"i\", \"X\", \"f\"]) for i in range(0, 50, 5)]\ndf = pd.concat(dfs)\n\n처음에는 많이 차이나지만 점점 해석적으로 계산한 선형 회귀 값과 유사해지는 것을 볼 수 있습니다.\n이 경사하강법의 장점은 손실함수를 정의 할 수만 있다면 적용할 수 있어 유연하게 많은 곳에 적용할 수 있습니다.\n\np = (\n    ggplot(data=df) +\n    aes(x=\"X\", y=\"f\") +\n    geom_point(data=data, mapping=aes(\"X\", \"y\")) +\n    geom_smooth(data=data, method=\"lm\", mapping=aes(\"X\", \"y\"), color=\"yellow\") +\n    geom_line(color=\"red\", size=1) +\n    facet_wrap(\"i\")\n)\np\n\n\n\n\n<ggplot: (8765486796228)>\n\n\n하나의 그래프에 겹쳐서 표현하면 아래와 같은 그래프가 됩니다.\n\np = (ggplot() +\n    geom_point(data=data, mapping=aes(\"X\", \"y\")) +\n    geom_smooth(data=data, method=\"lm\", mapping=aes(\"X\", \"y\"), color=\"yellow\")\n)\n\nfor df in dfs:\n    p += geom_line(data=df, mapping=aes(x=\"X\", y=\"f\", color=\"i\"))\n\n\np\n\n\n\n\n<ggplot: (8765489503242)>"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "업무를 위한 데이터 과학 레시피",
    "section": "",
    "text": "python\n\n\nplot\n\n\nvisualization\n\n\nmatplotlib\n\n\n\n\n\n\n\n\n\n\n\nNov 2, 2022\n\n\nJun Damin\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\npython\n\n\njax\n\n\nregression\n\n\ntutorial\n\n\n\n\n\n\n\n\n\n\n\nAug 22, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\n\nsetup\n\n\ntroubleshooting\n\n\nknowhow\n\n\n\n\n\n\n\n\n\n\n\nDec 23, 2021\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "데이터 과학에 관련된 코드를 모으고 공유하고자 합니다."
  }
]