[
  {
    "objectID": "posts/lineplot_following_economist_visual_guide/index.html",
    "href": "posts/lineplot_following_economist_visual_guide/index.html",
    "title": "Line plot following visual guide of Economists",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\nwe use three packages\n\nbasic plot\n\ngapminder = pd.read_csv(\"https://raw.githubusercontent.com/OHI-Science/data-science-training/master/data/gapminder.csv\")\n\ncountries = ['United Kingdom', 'United States', 'France', 'China', 'Japan', 'Korea Rep.', 'Ghana', 'Somalia', 'South Africa',]\n\ndata = gapminder.loc[gapminder.country.isin(countries)]\nfig, ax = plt.subplots(1, 1)\n\nfor country, df in data.groupby(\"country\"):\n    ax.plot(df[\"year\"], df[\"lifeExp\"], label=country)\n\nplt.show()\n\n\n\n\nFrom now, I will change this graph beautifully.\n\n# Setup plot size.\nfig, ax = plt.subplots(figsize=(6,6))\n\n# Create grid \n# Zorder tells it which layer to put it on. We are setting this to 1 and our data to 2 so the grid is behind the data.\n\nax.yaxis.set_ticks(range(25, 100, 15))\nax.grid(which=\"major\", axis='y', color='#758D99', alpha=0.6, zorder=1, )\n\n\n# Plot data\n# Loop through country names and plot each one.\nfor name, df in gapminder.groupby(\"country\"):\n    ax.plot(df['year'], \n            df['lifeExp'], \n            color='#758D99', \n            alpha=0.3, \n            linewidth=3)\n\n# Plot US and China separately\nax.plot(data[data['country'] == 'United States']['year'], \n        data[data['country'] == 'United States']['lifeExp'], \n        color='#006BA2',\n        linewidth=3)\n\nax.plot(data[data['country'] == 'China']['year'], \n        data[data['country'] == 'China']['lifeExp'], \n        color='#DB444B',\n        linewidth=3)\n\n# Remove splines. Can be done one at a time or can slice with a list.\nax.spines[['top','right','left']].set_visible(False)\n\n# Shrink y-lim to make plot a bit tigheter\nax.set_ylim(25, 100)\n\n# Set xlim to fit data without going over plot area\nax.set_xlim(1952, 2008)\n\n# Reformat x-axis tick labels\nax.xaxis.set_tick_params(labelsize=11)        # Set tick label size\n\n# Reformat y-axis tick labels\nax.set_yticklabels(np.arange(25,100,15),            # Set labels again\n                   ha = 'right',                 # Set horizontal alignment to right\n                   verticalalignment='bottom')   # Set vertical alignment to make labels on top of gridline      \n\nax.yaxis.set_tick_params(pad=11,             # Pad tick labels so they don't go over y-axis\n                         labeltop=True,      # Put x-axis labels on top\n                         labelbottom=False,  # Set no x-axis labels on bottom\n                         bottom=False,       # Set no ticks on bottom\n                         labelsize=11)       # Set tick label size\n\n# Add labels for USA and China\n\n\nax.text(x=.25, y=.63, s='United States', transform=fig.transFigure, size=10, alpha=.9, color=\"#006BA2\")\nax.text(x=.7, y=.52, s='China', transform=fig.transFigure, size=10, alpha=.9, color=\"#DB444B\")\n\n\n# Add in line and tag\nax.plot([0.12, .9],                  # Set width of line\n        [.98, .98],                  # Set height of line\n        transform=fig.transFigure,   # Set location relative to plot\n        clip_on=False, \n        color='#E3120B', \n        linewidth=.6)\nax.add_patch(plt.Rectangle((0.12,.98),                 # Set location of rectangle by lower left corder\n                           0.04,                       # Width of rectangle\n                           -0.02,                      # Height of rectangle. Negative so it goes down.\n                           facecolor='#E3120B', \n                           transform=fig.transFigure, \n                           clip_on=False, \n                           linewidth = 0))\n\n# Add in title and subtitle\nax.text(x=0.12, y=.91, s=\"Life Expectation\", transform=fig.transFigure, ha='left', fontsize=13, weight='bold', alpha=.8)\nax.text(x=0.12, y=.86, s=\"Various countries, 1952-2007\", transform=fig.transFigure, ha='left', fontsize=11, alpha=.8)\n\n# Set source text\nax.text(x=0.12, y=0.01, s=\"\"\"Source: \"GAP minder\"\"\", transform=fig.transFigure, ha='left', fontsize=9, alpha=.7)\n\nText(0.12, 0.01, 'Source: \"GAP minder')"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "practical recipes for data science",
    "section": "",
    "text": "plot\n\n\nvisualization\n\n\nmatplotlib\n\n\n\n\n\n\n\n\n\n\n\nNov 2, 2022\n\n\nJun Damin\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nNov 2, 2022\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nOct 30, 2022\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]