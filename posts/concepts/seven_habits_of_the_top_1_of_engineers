---
title: "코딩"
date: "2023-09-15"
cagetory:
  - engineering
  - code
  - tips
  - guideline
output: true
warning: false
code-fold: true
image: 
draft: true
---

[7 simple habits of the top 1% of engineers](https://engineercodex.substack.com/p/7-simple-habits-of-the-top-1-of-engineers?utm_source=Nomad+Academy&utm_campaign=eb779be7ba-EMAIL_CAMPAIGN_2023_09_15&utm_medium=email&utm_term=0_4313d957c9-eb779be7ba-156515609&mc_cid=eb779be7ba)라는 글을 보았습니다.

코딩에 대해서 이야기 하면서도 협업을 하는 사람들에게 참고가 될 만한 아이디어라고 생각해 각 습관을 소개하고 그 습관에 대한 제 생각을 덧붙여 이야기 해보고자 합니다.

## 1. 코드 자체로 부터 떨어져라(Detach form the code itself)

좋은 개발자들은 코드 자체에 집착하지 않는다고 합니다. 그들은 지우고 다시 시작하기를 두려워 하지 않는다고 합니다.

당신의 코드에 집착하지 않는 최고의 방법은 당신의 코드는 20년 뒤에는 높은 확률로 기술부채거나 삭제 되었거나 재작성 될 것을 이해하는 것입니다.

다른 업무를 함에도 지금 수립한 계획에 너무 집착해서 변화하는 현실과 괴리가 있는 계획을 따르고 있는 것은 아닌지 다시 살펴 봐야 할 것입니다. 

## 2. 일관된 기준을 사용하라(Use consistent standards)

첫 번째 습관은 일관된 기준을 사용하라고 합니다. 이는 코딩 스타일에 대한 이야기를 하고 있습니다. 이 습관이 들이면 코드는 읽기 쉽고 이해하기 쉽게 됩니다. 
일관된 스타일의 중요성은 빅테크에서도 강조하고 있어서 구글이나 메타에서도 자기들의 스타일 가이드라인을 공개하고 있습니다.

이런 습관은 글을 쓰는 사람들에게는 모두 적용할만한 습관이라는 생각이 듭니다.
논문이나 책을 편집해야 하는 상황이 있을 때, 혹은 지속적으로 이메일로 소통을 하거나 할 때 작성 방식이나 목차 스타일을 통일 해 둘 수 있다면 불필요한 오해나 추가적인 설명이 덜 필요해 질 수 있다고 생각합니다. 
특히 분석 노트북을 공유할 때 다른 사람이 인계 받아서 

여기서 참고할 만한 실천 방안은 스타일 가이드를 만들고 공유하는 것입니다. 협업을 해서 글을 써야 하는 사람들에게 가이드를 만들어서 문화를 만들어 가는 방식이라고 생각합니다.

## 3. 미적이면서도 간단한 코드를 써라(Write aesthetic, simple code)

두 번째 습관은 심미적인 코드를 쓰라고 하는 지점입니다. 여기서 심미적이라는 것은 읽기 쉽고 이해하기 쉬운 간단한 코드를 의미합니다.

이에 대한 예제로 **이름짓기**를 들고 있습니다. 좋은 이름은 깔끔하게 구분되며 헛갈리지 않고 스스로 설명을 하는 이름입니다.

좋은 이름은 언제나 어렵습니다. 또한 읽기 쉽고 이해하기 쉬운 코드는 좋은 구조를 가져야만 가능합니다.
좋은 글은 적절한 단어를 선택하며 구조도 깔끔하게 나뉘어서 구성되어 있는 것처럼 좋은 코드는 좋은 명칭과 구조를 가지고 있습니다.
따라서 좋은 코드를 생산하기 위해서는 좋은 글을 쓸 수 있는 방식에서 참고할 수 있지 않을까 싶습니다.

좋은 글을 쓰기 위해서 먼저 글을 쏟아내기 보다는 플롯이나 구성을 먼저 짜야 하는 것처럼 좋은 코드를 쓰기 위해서는 명칭과 역할, 구조를 먼저 짜 두어야 할 것 같습니다.

## 4. 놀라게 하지 마라(Don't allow suprises)

좋은 코드는 예측 가능한 코드라고 소개하면 이를 하기 위한 전략으로는 SOLID 원칙과 같은 코드 원칙과 적절한 테스트 작성을 제시하고 있습니다.

SOLID 원칙이나 테스트가 강조되는 건 코드 규모가 커지고 전체 코드를 알 수 있는 사람이 현실적으로 존재할 수 없는 현대 소프트웨어 개발에서의 문제를 해결하기 위한 전략으로 보고 있습니다.

이를 확대해서 고려해 보자면 체크리스트를 만들어서 미리 검증을 할 수 있는 구조를 만드는 것이 있을 수 있습니다.
추가로 생각해 볼 수 있는 부분은 분석 프로젝트를 진행 할 때 재생산할 수 있게 코드를 구성하는 등에 참고해 볼 수 있지 않을까 싶습니다.

또 다른 관점은 빠르게 보고하는 것이 될 수도 있습니다. 
매니저들이 가장 싫어하는 상황은 폭탄 선언입니다. 
혼자 숨겨두고 어떻게든 풀어내려고 하다가 나중에 풀지 못하고 매니저에게 이야기하는 일은 매니저 입장에서는 악몽과 같은 일일 겁니다.
문제가 생길 것 같으면 간단하게라도 그렇게 생각한 이유를 공유해 두는 원칙 같은 것이 좋은 방법일 수도 있을 것 같습니다.

## 5. 자주 소통하라(Communicate often)

우리는 모든 것을 알 수 없으며 부족한 지식은 다른 사람들의 이해서 채워지게 됩니다. 

최고의 엔지니어들은 소통적이고 동시에 협력적이었음을 언급하며 그들은 함께 일하는 시간을 두려워 하지 않았다고 합니다.

구체적인 행동 예시로는 빠른 리뷰를 요청한다거나, 중요한 코드 통합에는 추가적인 코드 리뷰어를 추가하는 것 등이 있습니다.

이런 조언은 코딩 뿐만 아니라 모두가 이야기 하는 부분이라고 생각합니다.
이런 협력은 자신이 다 알 수 없고 다 알지 못한다는 사실을 전제로 겸손하게 협력을 요청해야지만 가능하다고 생각합니다. 

## 6. 빠르고 천천히 코딩하라(Code fast... and slow)

최고의 엔지니어는 코딩을 천천히 함으로 빨리 프로젝트를 완료합니다.

모든 원칙과 습관에 추가적인 시간을 투입하여 차례 차례 프로젝트를 진행합니다.

표준, 테스트, 원칙 등을 고려하고 자주 소통함으로 그들은 장기적인 관점에서 그들의 시간이 아낍니다. 

빨리 첫 몇개의 단계를 통과하더라도 나중에 벽을 만나게 되어 다시 처음부터 시작해야 하게 됩니다. 

따라서 원칙에 따라 천천히 한발짝씩 나아가는 것이 가장 빠른 길입니다.

이 부분을 읽으면서 빨리가려면 혼자가고 멀리 가려면 함께 가라고 하는 말이 떠올랐습니다. 어디에 가야 하는지 생각하고 당장의 이득이 아닌 목적지에 도착할 수 있는지 생각해 보아야 할 것입니다.

## 7. 맹목적으로 규칙을 따르지 마라(Don't follow rules blindly)

소프트웨어 개발의 현실은 모든 코드가 클린하고 규칙을 완벽하게 따를 수 없습니다.

하지만, 클린하고 이해할만하며 테스트가 가능하고 가치 있는 코드는 가능합니다.

중요한 것은 코드가 현실에 도움을 주어야 하는 것이고 규칙을 완벽하게 지키기 위해서 너무 많은 시간을 소모하는 건 오히려 해가 됨을 이야기하고 있습니다. 
만약에 20시간을 들여서 규칙을 준수하지만 이전과 동일한 결과를 내는 코드를 만들었다고 하면 괜찮을까요?

