# Data를 다루는 기본 : Dataframe

많이들 일반적으로 말하는 데이터는 테이블형 테이터라고 합니다.
그런 데이터를 잘 다룰 수 있게 구현 된 것이 `Dataframe`이라고 불리는 것입니다.

`Dataframe`은 아마도 통계에서 다루는 `R`에서 영감을 받아서 많이 만들어 진 것으로 알고 있습니다.
그래서 `R`에서 따온 것들이 많은 것으로 알고 있습니다.

`R`은 크게 두가지 스타일로 나뉩니다. 전통적인 `R` 프로그래밍과 `tidyverse`스타일로 나뉩니다.
최근에는 `tidyverse` 스타일이 기준이 되고 있어 `tidyverse`스타일에 대해서 배워보도록 하겠습니다.

## 세팅하기

기본 자료는 많이들 쓰는 자료를 따서 써보도록 하겠습니다.

### 패키지 설치하기

각 언어별로 Dataframe을 다루는 패키지를 설치해 보도록 하겠습니다.

::: {.panel-tabset}

#### Python
커맨드 창에서 아래와 같이 입력합니다.
```{{bash}}
pip install pandas
conda install pandas
pip install sklearn
```

#### Julia
Julia REPL에서 아래와 같이 입력합니다.
```{{Julia}}
using Pkg

Pkg.add("DataFrames")
```

또는 `]`을 눌러 Pkg 모드로 들어간 다음 
```{{bash}}
add DataFrames
```
라고 쳐도 가능합니다.

#### R

R 콘솔에서 아래와 같이 입력합니다.

```{{r}}
install.packages("tidyverse")
```
:::

## 데이터 불러오기 IO

데이터를 다룰 때 가장 먼저 해야 하는 것이 데이터를 읽어오는 것입니다.
기업에서 많은 테이블 형식의 데이터를 저장할 때 기본적으로는 `Database`를 사용합니다.

다만 가공하거나 외부에 접근 권한을 주는 것이 어렵기 때문에 많은 경우, CSV나 Excel과 같은 파일 형태로 만들어서 공유하게 됩니다. 

그렇기 때문에 여기서는 CSV와 Excel 파일을 어떻게 불러오는지 정리해 보도록 하겠습니다.

### CSV 파일 불러오기

오늘은 이후에도 사용할 데이터를 불러오도록 하겠습니다. 
지금은 인터넷에 있는 파일을 불러오는 방법을 사용하는데, 로컬 컴퓨터에 있는 자료를 받는 것도 유사한 방법으로 가능합니다.

CSV 파일은 처음에는 `Comma Seperated Values`라는 이름이었으나, 이후 쉼표(`Comma`)를 포함하는 자료에 대해서 문제가 발생했기에 `Character Seperated Values`라는 이름으로 확장되어 어떤 문자를 기반으로 나눌지를 결정할 수 있게 되어 있습니다.

일반적으로는 `,`, `tab`, `|` 등이 많이 사용되고 있습니다.

CSV 파일을 읽어올 때는 인코딩이라는 것을 신경 써야 하는 경우가 있습니다. 대다수읙 경우에는 문제가 없지만, 불러온 값이 이상한 문자로 보인다면, 인코딩을 지정해서 해결할 수 있습니다.

::: {.panel-tabset}


#### Python 

```{python}
import pandas as pd

data_url = "https://rawcdn.githack.com/JunDamin/languages4ds/bab36dd0fd3b7f3e0fc0e710947113a625b88405/datasets/Korean_demographics_2000-2022.csv"
data = pd.read_csv(data_url)
```

#### Julia

```{julia}
using DataFrames, CSV

data_url = "https://rawcdn.githack.com/JunDamin/languages4ds/bab36dd0fd3b7f3e0fc0e710947113a625b88405/datasets/Korean_demographics_2000-2022.csv"
data = DataFrame(CSV.File(download(data_url)))
```

#### R

```{r}
data_url <- "https://rawcdn.githack.com/JunDamin/languages4ds/bab36dd0fd3b7f3e0fc0e710947113a625b88405/datasets/Korean_demographics_2000-2022.csv"

data = read.csv(data_url)

```
:::


### excel 파일 불러오기

엑셀을 읽어오는 방법도 크가 다르지 않습니다.
위에서 한 코드에서 csv를 excel로 바꾸면 아마 대다수 문제 없이 기동할 것입니다.


## 데이터 쪼개기 (Subset)

데이터를 다룰 때 아마도 가장 많이 하는 건 큰 데이터에서 원하는 데이터만 모아보는 것입니다.

이런 것을 부르는 여러가지 단어들(subset, select, filter)등이 있습니다.

그 여러가지를 각 언어에서는 어떻게 구현되어 있는지 살펴 보도록 하겠습니다.


### 행, 열 선택하기

::: {.panel-tabset}

#### python

판다스 데이터 프레임은 `loc`과 `iloc`을 사용해서 행을 선택할 수 있습니다.

두가지 방식의 차이는 각 행의 인덱스 이름으로 하는 것인지, 아니면 순서(위치)로 하는지입니다.

지금 데이터 인덱스와 iloc의 순서가 동일하여 행은 차이가 없습니다.
`:`을 통해서 범위를 선택할 수 있습니다.

아무런 값을 넣지 않으면 처음 혹은 끝을 의미하게 됩니다.
```{python}

data.loc[1]
data.iloc[1]

data.loc[0:2]
data.loc[:2]
```

컬럼을 선택할 때는 차이를 볼 수 있습니다.

컬럼을 선택하는 방법은, 행을 넣고 열을 넣습니다.


```{python}
data.loc[:, "Date"]
data.iloc[:, 0]
```

판다스의 `loc` 메소드는 행이나 열과 동일한 길이의 `boolean` array를 사용해서 슬라이싱을 할 수 있습니다.

```{python}
index_series = data["Region"] == "Seoul"
column_series = data.columns == "Date"
data.loc[index_series, column_series]
```

#### Julia

줄리아 데이터프레임에는 메크로라는 것이 있습니다.

줄리아는 파이프 연산을 할 수 있습니다.

```{julia}

data
select(data, :Date)

data[:, 1:2]
data[!, ["Date", "Region"]]

data |> (df) -> select(df, :Date)


```

:::


### 필터링하기

인덱스나 컬럼이 아니라 값을 기반으로 선택할 때에는 필터를 사용할 수 있습니다.


### 랜덤 샘플링하기


## 데이터 모양 바꾸기 (Reshape)

데이터프레임에서 가장 많이 하게 되는 활동 중 하는 데이터의 모양을 바꾸는 것입니다.

### 컬럼을 열로 옮기기

::: {.panel-tabset}
#### python

```{python}

```

:::
### 한 열을 여러 열로 나누기

### 행을 열로 나누기

### 여러 열을 한 열로 합치기

### 컬럼, 인덱스 이름 바꾸기



## 자료 요약하기

### 평균, 분산, 최대, 최소, 중간값, 최빈값 등 

### 각 열별로 적용하기

## 새로운 변수 만들기

### 누적합

### 누적곱

### 적용하기

### 한칸 밀려서 잡기
lead

## 데이터 셋 합치기

### join

### 병합

### 차이


## 그룹별로 다루기

### groupby


::: {.panel-tabset}

#### Python

```{python}
data.info()
```


```{python}
data.describe()
```

```{python}
corr = data.corr()
corr.loc[corr.index.str.contains("rate"), corr.columns.str.contains("rate")]
```
:::

### 데이터 선택하기


주소를 선택 vs. 값을 선택
::: {.panel-tabset}

#### Python

파이썬에서 데이터를 선택하는 방법은 `loc` 또는 `iloc`을 선택해서 개별 항목을 선택할 수 있습니다.

선택할 때 특정 항목의 이름을 넣을 수도 있지만, 같은 길이의 `True`와 `False`의 리스트 등으로도 선택할 수 있습니다.

```{python}
data["Date"] = data["Date"].astype("datetime64")
data.loc[data["Date"].between("2000-01-01", "2010-01-01"),]

# data.iloc[]
```

판다스에서는 `query` 메소드를 사용해서 여러 조건을 만족하는 행만을 선택할 수 있습니다.

```{python}
data.query("Date < 20100101 & Date > 20000101")
```

많이 처리하는 것중 하나는 결측값을 제외 하는 것입니다.
```{python}
data.dropna()
```

결측값을 제외하는 방법으로 특정 열만을 보도록 할 수도 있습니다.

```{python}
data.dropna(subset=["Date"])
```
:::

파이썬에서 값을 바꾸는 방법은 주소에 값을 할당하는 방식으로 가능합니다.

인덱스를 아래와 같이 바꿀 수 있습니다.

```{python}
data.rename({1:3, 3:1})
```

`axis`를 지정해서 컬럼도 인덱스와 동일한 방법으로 바꿀 수 있습니다.

```{python}
data.rename({"Date": "날자"}, axis=1)
```

## Reshape Data


### Pivot and Pivot table

::: {.panel-tabset}

#### Python


```{python}
# data.transform()
```

:::

### Stack and unstack

### Melt

## Missing data

## Advanced Indexing

## Duplicate Data

## Grouping Data

## Combining Data

## Aggregating Data

## Vector Operation

### 데이터 요약하기

```{python}
# data.agg()
# data.aggregate()
```


### split-apply-combine

```{python}
# data.groupby()
```

## 적용 사례

### 그룹별 평균과의 차이를 구하기

