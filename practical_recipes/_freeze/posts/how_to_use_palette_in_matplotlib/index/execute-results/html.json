{
  "hash": "20a844a6cf9b518b2bf98eb3670a451c",
  "result": {
    "markdown": "---\ntitle: \"How to use palette in matplotlib\"\nauthor: \"Jun Damin\"\ndate: \"2022-11-03\"\ncategories:\n  - plot\n  - visualization\n  - matplotlib\n  - palette\ndraft: true\n---\n\nhttps://towardsdatascience.com/how-to-create-and-use-custom-matplotlib-style-sheet-9393f498063\n\n# how to set custom palette\n\nColor is one of the most important aspect of plot for production. According to 인지과학,  human recognize color first. Therefore in any style guide, they provide their own color combination.\n\n% ref link. \n\nFor example, [Economist Visual Guide](https://design-system.economist.com/documents/CHARTstyleguide_20170505.pdf) provide their choice of colors with table as below.\n\nmatplotlib color palette structure\n\nsave graph, with different color palette.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\ncolor_names = {\n    \"ECON RED\" : \"E3120B\",\n    \"Black\" :  \"0C0C0C\",\n    \"Main\" : [\"DB444B\", \"006BA2\", \"3EBCD2\", \"379A8B\", \"EBB434\", \"B4BA39\", \"9A607F\", \"D1B07C\"],\n    \"Boxes/NAV\" : [\"758D99\", \"E9EDF0\", \"B7C6CF\"],\n    \"Text\": \"758D99\"\n}\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndef plotColor(name, colors):\n    #  PLOT colors from sorted dataframe\n    color_count = len(colors)\n    if type(colors) == str:\n        color_count = 1\n        colors = [colors]\n    \n    a = 3                     #  number of columns\n    b = int(color_count/a)+1  #  number of rows\n    c = 1                     #  subplot counter  \n    \n    plt.figure(figsize=(a*4,b))\n    \n    for j in colors:\n        plt.subplot(b, a, c)  # row, column, counter\n        plt.axis('off')\n        plt.text(0,0.04, j, color = 'black', fontsize = 18)\n        plt.hlines(0,0,10, color = f\"#{j}\" ,linestyles = 'solid', linewidth = 30)\n        c = c + 1\n\n    plt.suptitle(name)\n    plt.tight_layout()\n    plt.show()\n\n    return\n\ncolor_names.items()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\ndict_items([('ECON RED', 'E3120B'), ('Black', '0C0C0C'), ('Main', ['DB444B', '006BA2', '3EBCD2', '379A8B', 'EBB434', 'B4BA39', '9A607F', 'D1B07C']), ('Boxes/NAV', ['758D99', 'E9EDF0', 'B7C6CF']), ('Text', '758D99')])\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndef cmap_plot(cmap_list, ctype):\n    cmaps = cmap_list\n\n    n = len(cmaps)\n\n    fig = plt.figure(figsize=(8.25, n*.20), dpi=200)\n    ax = plt.subplot(1, 1, 1, frameon=False, xlim=[0,10], xticks=[], yticks=[])\n    fig.subplots_adjust(top=0.99, bottom=0.01, left=0.18, right=0.99)\n\n    y, dy, pad = 0, 0.3, 0.08\n\n    ticks, labels = [], []\n\n    for cmap in cmaps[::-1]:\n        Z = np.linspace(0,1,512).reshape(1,512)\n        plt.imshow(Z, extent=[0,10,y,y+dy], cmap=plt.get_cmap(cmap))\n        ticks.append(y+dy/2)\n        labels.append(cmap)\n        y = y + dy + pad\n\n    ax.set_ylim(-pad,y)\n    ax.set_yticks(ticks)\n    ax.set_yticklabels(labels)\n\n    ax.tick_params(axis='y', which='both', length=0, labelsize=5)\n    plt.title(f'{ctype} Colormap', fontweight='bold', fontsize=8)\n    plt.show()\n```\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}