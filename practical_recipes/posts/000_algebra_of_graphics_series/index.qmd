---
title: "Algebra of Graphics with Julia"
date: "2023-05-11"
cagetory:
  - julia
  - visualization
  - tutorial
jupyter: julia-1.9
output: true
warning: false
code-fold: true
image: penguins.png
draft: true
---

줄리아 언어에 그래픽 옵션 중 Makie(마키에)라는 패키지가 있습니다. 
파이썬의 matplotlib과 같이 그래픽 엔진과 같은 기능을 가지고 있습니다.

matplotlib에는 seaborn이 있듯이 Makie에는 Algebra of Graphics라는 패키지가 있습니다.
주로 사용하는 기능을 쉽게 만들 수 있는 기능인데요. grammar of graphics의 영향을 받은 R의 ggplot2와 유사한 기능이 있습니다.

오늘은 그 [튜토리얼](https://aog.makie.org/stable/generated/penguins/)을 같이 살펴 보도록 하겠습니다.

## 팽귄 데이터 셋

오늘 시각화할 데이터 셋은 팽귄 데이터 셋입니다. 
팽귄 333마리에 대한 관측자료입니다.
종, 서식지, 부리(bill) 길이, 부리 깊이, 날개(flipper) 길이, 몸무게, 성별 정보를 가지고 있습니다. 


```{julia}
using PalmerPenguins, DataFrames

penguins = dropmissing(DataFrame(PalmerPenguins.load()))
first(penguins, 6)
```

## 숫자 세기

팽귄 수를 세어 봅니다. 
AoG(Algebra of Graphics)는 * 기호는 적용을, +는 붙이는 기능을 합니다.
`data()` 함수로 데이터를 가져오고, `frequency()`는 숫자를 셉니다.
`mapping()`함수는 어떤 기준으로 숫자를 셀지 결정합니다.

마지막으로 `draw` 함수를 통해 출력 합니다.

```{julia}

using AlgebraOfGraphics, CairoMakie
set_aog_theme!()

axis = (width = 225, height = 225)
penguin_frequency = data(penguins) * frequency() * mapping(:species)

draw(penguin_frequency; axis = axis)

```


### 색 지정 

여기에 색깔을 지정해 봅니다.
기존에 만든 그래프 `penguin_frequency`에 새로운 항목을 `mapping` 함수를 통해 적용합니다. 

```{julia}

plt = penguin_frequency * mapping(color = :island)
draw(plt; axis = axis)

```

### 쌓는 기준

dodge argument를 통해 병렬로 제시할 수 있습니다.

```{julia}
plt = penguin_frequency * mapping(color = :island, dodge = :island)
draw(plt; axis = axis)

```

유사하게 `sex`로 구분할 수도 있습니다.

```{julia}
plt = penguin_frequency * mapping(color = :island, dodge = :sex)
draw(plt; axis = axis)

```

`stack`을 지정하면 누적그래프를 볼 수 있습니다. 

```{julia}
plt = penguin_frequency * mapping(color = :island, stack = :island)
draw(plt; axis = axis)
```

`dodge`와 같이 쓰이면 다음과 같습니다.

```{julia}
plt = penguin_frequency * mapping(color = :island, stack = :island, dodge=:sex)
draw(plt; axis = axis)
```

scatter plot은 아래와 같이 만들 수 있습니다.

```{julia}
penguin_bill = data(penguins) * mapping(:bill_length_mm,:bill_depth_mm)
draw(penguin_bill; axis = axis)
```

함수를 통해 변환하고 이름을 반영할 수도 있습니다. 

```{julia}
penguin_bill = data(penguins) * mapping(
    :bill_length_mm => (t -> t / 10) => "bill length (cm)",
    :bill_depth_mm => (t -> t / 10) => "bill depth (cm)",
)
draw(penguin_bill; axis = axis)
```

부리 길이와 깊이에 대한 플롯에 색을 매칭할 수 있습니다.

```{julia}
plt = penguin_bill * mapping(color = :species)
draw(plt; axis = axis)
```

선형 회귀를 적용하여 그래픽을 적용할 수 있습니다.

```{julia}
plt = penguin_bill * linear() * mapping(color = :species)
draw(plt; axis = axis)
```


`+`를 통해 두 그래프를 곂쳐서 출력 할 수 있습니다. 

```{julia}
plt = penguin_bill * linear() * mapping(color = :species) + penguin_bill * mapping(color = :species)
draw(plt; axis = axis)
```