---
title: "Leo's Syndrome with Julia Makie"
date: "2022-12-16"
categories:
  - julia
  - visualization
  - makie
execute: 
  enabled: false
image: "../images/leo.png"
---


이 글은 [Leo's Syndrome](https://beautiful.makie.org/dev/examples/generated/2d/datavis/leos/)을 기반으로 작성하였습니다.

![Leo's Syndrome](leo.png)

재미있는 글을 발견하여 소개하고자 합니다.

영화배우 레오나르도 디카프리오는 어린 여성과 사귀는 것으로 유명합니다. 어떤 분이 위에 글과 같이 깔끔하게 데이터 시각화를 하였는데요. 이는 `Makie`라고 하는 Julia 패키지를 사용하였습니다.

`Makie`는 비교적 최근에 개발된 라이브러리 입니다. 여러 백엔드를 사용해서 개발할 수 있다는 특징을 가지고 있습니다만, 아직 초창기다보니 기본이 되는 백엔드는 `GLMakie`이며 이외에 여러가지 다양한 백엔드로 개발되고 있습니다.

기본 문법 들을 하나 하나 살펴보도록 하겠습니다.

## 패키지 불러오기

```{julia}
using Downloads, GLMakie
using Colors, Statistics
using FileIO
```

파이썬과 비슷하게 가장 먼저 볼 수 있는 건 패키지를 로딩하는 부분입니다.
파이썬과 같이 `import`를 사용할 수도 있지만, 줄리아에서는 `using`사용하는 것이 표준이 되는 방식입니다.

## 백엔드 선택하기

```{julia}
GLMakie.activate!()
```

위에서 불러온 그래픽 패키지인 `GLMakie`를 활성화 시킵니다.

## 파일명 합치기

```{julia}
names = ["Leonardo Dicaprio", "Gisele Bundchen", "Bar Refaeli",
        "Blake Lively", "Erin Heatherton", "Toni Garrn", "Kelly Rohrbach",
        "Nina Agdal", "Camila Morrone"]
namesfiles = join.(split.(lowercase.(names)), "_")
```

이름을 정하고 파일명에 맞출 수 있도록 소문자로 변환하고 띄어쓰기를 "_"로 치환합니다.
줄리아는 Broadcasting을 `.`을 함수 뒤에 붙이는 것을 통해 별도의 조치 없이 적용이 가능합니다. 
예를 들면 `lowercase.(names)`의 뜻은 `name`의 각 원소에 `lowercase`함수를 적용하라는 것과 같습니다.

## 축에 들어갈 값을 생성하기

```{julia}
y_xticks = 1998:2022
ys_xticks = string.(1998:2022)
yd_xticks = ["'"*t[3:4] for t in ys_xticks]
age_leo = 24 .+ collect(1:length(y_xticks)) .- 1

age_gf = [18:23, 20:25, 23, 22, 20:21,25, 24:25, 20:25]
years = [1998:2003, 2004:2009, 2010, 2011, 2012:2013, 2014,
    2015:2016, 2017:2022]
```


각종 축에 사용될 값을 생성합니다.
줄리아에서는 `:`을 사용해서 연속된 정수 값을 표현할 수 있습니다.
예를 들면 `1998:2022`는 1998부터 2022까지 1씩 증가하는 것을 의미하며 파이썬에서 `range(1998, 2023)`과 동일 합니다. 줄리아는 파이썬과 다르게 범위를 포함하는 특징을 가지고 있습니다. 이는 수학에서 사용하는 것과 가능한 유사한 방식을 구현하기 위함으로 알고 있습니다.

이름을 바꾸었던 것과 같이 `string` 함수를 적용해 `ys_xticks`를 생성했음을 알 수 있습니다. 이렇게 바꾼 이유는 뒤에 두글자만 가져와 `yd_xticks`를 만들기 위함 입니다.

줄리아의 또다른 특징을 여기서 볼 수 있는데 문자열을 병합할 때 `+`기호가 아닌 `*`기호를 씁니다. 왜 이렇게 만들었는지 궁금한 부분이긴 한데 이미 많은 코드에 `*`가 사용되고 있고 바꾸는 실익이 거의 없다고 판단하여 유지되고 있다고 알고 있습니다.

그다음에는 레오의 나이를 표기하고자 수열을 만들었습니다.
`24 .+ collect(1:length(y_xticks)) .- 1`을 통해 24살에서 1부터 길이까지의 수열을 만들고 1을 빼서 24살 부터 데이터 수 만큼 1씩 증가하는 수열을 만들었습니다. 여기서 `collect`라는 함수는 배열을 만드는 함수로 보시면 됩니다.

또한 `.+`는 각각에 더하기 연산을 하라는 의미입니다.

이 다음에는 레오나르도의 여자친구들의 나이와 기간이 적혀 있습니다.

## 사진을 불러오는 함수

```{julia}
function getPicture(; name = "leonardo_dicaprio",
        imgs_link = "https://raw.githubusercontent.com/tashapiro/tanya-data-viz/main/dicaprio-gfs/images/")
    load(Downloads.download(joinpath(imgs_link, name * ".png")))
end
```

줄리아에서 사진을 불러오는 함수를 만들었습니다. 줄리아는 파이썬과 다르게 `function`이란 키워드를 사용하여 함수를 만듭니다. 
또한 기본값이 있는 파라미터를 지정할 경우에는 `;` 뒤에 이름과 파라미터를 넣으면 됩니다. 이 또한 파이썬과 다른 특징이라고 볼 수 있습니다.

이 함수는 링크 주소를 생성하고 그 데이터를 불러오는 함수입니다.

줄리아에서 함수는 `return`을 지정하지 않을 경우 마지막 줄을 반환하는 특징이 있습니다.
이는 함수가 상태를 변화시키는 것이 아니라 수학에서 말하는 값을 반환하는 것을 기본으로 하고 있다고 생각하기 때문에 도입된 문법이라고 생각합니다.

## 베지어 곡선을 만들어 주는 함수

```{julia}
function poly3(t, p0, p1, p2, p3)
    Point2f((1-t)^3 .* p0 .+ t*p1*(3*(1-t)^2) + p2*(3*(1-t)*t^2) .+ p3*t^3)
end
```


```{julia}
function BezierPath(o, f, co, cf; t = range(0,1, length=30))
    return [poly3(t, o, co, cf, f) for t in t]
end
```


베지어 곡선을 만들기 위한 함수입니다. `p0, p1, p2, p3` 점을 지나는 베지어 곡선을 위해서 만들어진 함수 입니다.

위의 `poly3`는 3차 함수이며 `range()`함수를 통해서 30개의 포인트를 부드럽게 생성하는 함수 입니다.


```{julia}
function posFig(ax, x; yoff=100, ylow = 15)
    o = ax.scene.px_area[].origin - Point2f(0, yoff)
    return Makie.project(ax.scene, Point2f(x, ylow)) + o
end
```

피겨의 위치를 반환 합니다.

```{julia}
function supLine(p1, p2; x=0,y=8)
    [p1 .+ Point2f(x,y), p1, p2, p2 .+ Point2f(x,y)]
end
```

디긋을 어긋난 위치를 연결해서 보여줍니다.

## 색과 사진

```{julia}
pictures = [getPicture(; name = n) for n in namesfiles]
cmap = resample_cmap(Reverse(:Hiroshige), 9)
blue = colorant"#6EE2FFFF";
grey = colorant"#D0DFE699";

αcolors = [blue, blue, (grey, 0.0), (grey,0.0)]
αcolorsLeg = [blue, (grey, 0.0), (grey,0.0), blue]

```

위에서 정의한 함수와 색감을 정합니다.
먼저 사진을 불러와 배열에 넣습니다.
그다음으로는 색깔 맵을 구합니다.
`resample_cmap`이란 함수는 색 간격을 나누어 줍니다.
`Reverse`함수를 통해서 색의 방향을 반대로 만든 후 9개의 단계로 샘플링을 하게 됩니다.
그후 두 색을 별도로 지정합니다. 그 지정 방식은 메크로를 활용하고 있습니다.
줄리아에서는 메크로라는 아주 강력하지만 위험한 기능이 있습니다. `colorant"#6EE2FFFF";`은 뒤 문자열을 색 타입으로 변환하는 매크로 입니다.
여러가지를 손쉽게 처리할 수 있어 아주 강력하지만, 잘못 사용하면 코드 가독성을 많이 떨어뜨리기에 조심해서 사용해야 합니다.

그후 여러 색의 집합을 만들었습니다.

## 범주를 위한 도형

```{julia}
legleo = MarkerElement(color =1.2cmap[2:3:end], marker = :circle, markersize = 20,
        points = Point2f[(0, 0.5), (1, 0.5), (2, 0.5)])
leggirl = PolyElement(color = αcolorsLeg, strokecolor = :white, strokewidth = 0.85,
    points = Point2f[(-0.2, 0), (2.2, 0), (2.2,1), (-0.2, 1)])
```

레오나르도의 나이를 표현하기 위한 점 3개를 만들는 것과 여자친구의 나이를 나타내는 사각형을 만들었습니다.

## 테마 블록 

```{julia}
with_theme(theme_black()) do
...
end
```

테마 블록을 통해서 여러가지 기본이 되는 테마를 적용할 수 있습니다.

## 그림 사이즈와 축 정하기

```{julia}
    fig = Figure(; resolution = (1200,800))
    ax = Axis(fig[1,1:9], ylabel = "Age [Years]", xlabel = "")
```

## 그래프 그리기

```{julia}
    lines!(ax, y_xticks, age_leo; label = "Leo's age", color = age_leo,
        linestyle = :dot, colormap = 1.2cmap[2:end])
    scatter!(ax, y_xticks, age_leo; label = "Leo's age", color = age_leo,
        markersize = 10, colormap = 1.2cmap[2:end])
```


## 여자친구들의 나이 그래프 그리기

```{julia}
    [barplot!.(years[i], age_gf[i]; color = αcolors,label = "Girlfriend's age",
        strokewidth=0.85, strokecolor= (:white,1)) for i in eachindex(years)]

    [scatter!(ax, [2009,2014, 2016, 2022], fill(25 +1,4);
        color = (blue, 0.1), markersize = 50-3i) for i in 1:10]

    lines!(ax,supLine(Point2f(2009,29), Point2f(2022,29); x=0,y=-3); color=blue)
    lines!(ax,supLine(Point2f(2014,29), Point2f(2016,29); x=0,y=-3); color=blue)

    text!(ax, "Threshold", position = (2014,30))
    [text!(string.(age_gf[i]), position = Point2f.(years[i], age_gf[i] .+0.5),
        align = (:center, :bottom), fontsize = 16) for i in eachindex(age_gf)]
```

여자친구들의 나이를 기반으로 바 그래프를 하나씩 그리도록 합니다.

또한 임계값에 대해서 강조하기 위한 동그라미를 그립니다.

거기에 맞게 디귿 모양의 보조선을 그립니다.

그리고 필요한 글자를 입력합니다.

또한 연도도 표시하도록 입력합니다.

## 레오나르도의 나이 입력하기

```{julia}
    text!(string.(age_leo), position = Point2f.(y_xticks, age_leo .+0.5),
        align = (:center, :bottom), fontsize = 16)
```

레오나르도의 나이 숫자를 표시합니다.


## 축상 숫자 표시

```{julia}
    ax.xticks = (y_xticks, yd_xticks)
    ax.yticks = 0:5:55
    ylims!(ax,15,52)
    xlims!(ax,1997,2023)
    hidespines!.(ax)
```

각 축의 단위를 표시하는 틱을 지정합니다.

그후 임계값을 지정합니다.

마지막으로 스파인을 숨깁니다.

## 사진 배치

```{julia}
    # pictures
    aximgs = [Axis(fig[2,i], aspect = 1, xlabel = join(split(names[i]), "\n"),
        xlabelcolor = blue) for i in 1:9]
    [image!(aximgs[i], rotr90(pictures[i])) for i in eachindex(pictures)]
    hidedecorations!.(aximgs; label =false)
    hidespines!.(aximgs)
    aximgs[1].xlabelcolor = "#F79D1EFF"
    limits!.(aximgs,1,78,1,78)
```


사진을 배치하기 전 이름을 줄바꿈으로 만들어 둡니다.

그 다음 그림을 붙여 넣습니다. 90도를 회전 시키는 이유는 그림의 픽셀 배치가 90 차이가 나기 때문입니다. 

그 다음 그림 표시해주는 것을 생략하시고, 그림을 그립니다.
마지막으로 첫번째 그림의 색에 맞게 글자 색을 변경하고 그림 크기를 지정합니다.

## 곡선으로 연결하기

```{julia}
# connecting lines in fig space!
    ops = [posFig(ax, mean(years[i]); yoff=250, ylow = 15) for i in 1:8]
    fps = [posFig(aximgs[i], 39; yoff=120, ylow = 78) for i in 2:9]
    supls = [supLine(posFig(ax, years[i][begin]; yoff=250, ylow = 15),
        posFig(ax, years[i][end], yoff=250, ylow = 15)) for i in 1:8]
    [lines!(fig.scene, supls[k], color = 1.2cmap[k+1]) for k in 1:8]
    [lines!(fig.scene, BezierPath(ops[k], fps[k], [ops[k][1],ops[k][2]-30],
        [fps[k][1],fps[k][2]+30]); color = 1.2cmap[k+1]) for k in 1:8]
```

시작지점과 끝지점의 위치를 지정합니다. `supls`를 통해 위치를 지정하고 해당 점을 연결하여 디귿 모양의 부분을 먼저 생성합니다. 
그 후 가운데 부분에 해당하는 위치에 맞도록 베지어 곡선을 통해 부드럽게 연결합니다.

## 제목과 마무리

```{julia}
    rowsize!(fig.layout,2,Auto(0.2))
    rowgap!(fig.layout, 60)
    Legend(fig[1,1], [legleo, leggirl], ["      Leo's age", "      Girlfriend's age"],
        halign = :left, valign = :top,tellheight=false,tellwidth=false,
        margin = (30, 10, 10, 10), framecolor = (:white,0.2))
    Label(fig[0,:], "Leo's Syndrome", color = "#F79D1EFF", textsize = 32)
```

레이아웃을 조정하고 간격을 조정합니다.
이전에 생성해 둔 모양을 가지고 범례를 만듭니다.

그 후 레이블을 활용해 제목을 만듭니다.

## 마무리 

이 모든 과정을 다 모아서 아래와 같이 작성하면 위에서 보았던 이미지를 얻을 수 있습니다.

이 모든 과정을 통해 우리는 `Makie`를 통해 어떻게 그림을 그릴 수 있는지 알 수 있었습니다.

자동으로 위치를 잡아주고 연결해주는 등의 편의 기능은 부족하기에 실무에서 효과적일지에 대해서는 좀 더 알아보아야 할 것 같습니다.

```{julia}
using Downloads, GLMakie
using Colors, Statistics
using FileIO

GLMakie.activate!()
# some data
names = ["Leonardo Dicaprio", "Gisele Bundchen", "Bar Refaeli",
        "Blake Lively", "Erin Heatherton", "Toni Garrn", "Kelly Rohrbach",
        "Nina Agdal", "Camila Morrone"]
namesfiles = join.(split.(lowercase.(names)), "_")

y_xticks = 1998:2022
ys_xticks = string.(1998:2022)
yd_xticks = ["'"*t[3:4] for t in ys_xticks]
age_leo = 24 .+ collect(1:length(y_xticks)) .- 1

age_gf = [18:23, 20:25, 23, 22, 20:21,25, 24:25, 20:25]
years = [1998:2003, 2004:2009, 2010, 2011, 2012:2013, 2014,
    2015:2016, 2017:2022]
# helper functions
# Inspired by https://github.com/tashapiro/tanya-data-viz/tree/main/dicaprio-gfs
function getPicture(; name = "leonardo_dicaprio",
        imgs_link = "https://raw.githubusercontent.com/tashapiro/tanya-data-viz/main/dicaprio-gfs/images/")
    load(Downloads.download(joinpath(imgs_link, name * ".png")))
end
function poly3(t, p0, p1, p2, p3)
    Point2f((1-t)^3 .* p0 .+ t*p1*(3*(1-t)^2) + p2*(3*(1-t)*t^2) .+ p3*t^3)
end
function BezierPath(o, f, co, cf; t = range(0,1, length=30))
    return [poly3(t, o, co, cf, f) for t in t]
end
function posFig(ax, x; yoff=100, ylow = 15)
    o = ax.scene.px_area[].origin - Point2f(0, yoff)
    return Makie.project(ax.scene, Point2f(x, ylow)) + o
end
function supLine(p1, p2; x=0,y=8)
    [p1 .+ Point2f(x,y), p1, p2, p2 .+ Point2f(x,y)]
end

pictures = [getPicture(; name = n) for n in namesfiles]
cmap = resample_cmap(Reverse(:Hiroshige), 9)
blue = colorant"#6EE2FFFF";
grey = colorant"#D0DFE699";
# αcolors = [blue, grey, (grey, 0.1), (blue,0.65)] # try this one 😄
αcolors = [blue, blue, (grey, 0.0), (grey,0.0)]
αcolorsLeg = [blue, (grey, 0.0), (grey,0.0), blue]

legleo = MarkerElement(color =1.2cmap[2:3:end], marker = :circle, markersize = 20,
        points = Point2f[(0, 0.5), (1, 0.5), (2, 0.5)])
leggirl = PolyElement(color = αcolorsLeg, strokecolor = :white, strokewidth = 0.85,
    points = Point2f[(-0.2, 0), (2.2, 0), (2.2,1), (-0.2, 1)])

with_theme(theme_black()) do
    fig = Figure(; resolution = (1200,800))
    ax = Axis(fig[1,1:9], ylabel = "Age [Years]", xlabel = "")
    lines!(ax, y_xticks, age_leo; label = "Leo's age", color = age_leo,
        linestyle = :dot, colormap = 1.2cmap[2:end])
    scatter!(ax, y_xticks, age_leo; label = "Leo's age", color = age_leo,
        markersize = 10, colormap = 1.2cmap[2:end])
    [barplot!.(years[i], age_gf[i]; color = αcolors,label = "Girlfriend's age",
        strokewidth=0.85, strokecolor= (:white,1)) for i in eachindex(years)]
    [scatter!(ax, [2009,2014, 2016, 2022], fill(25 +1,4);
        color = (blue, 0.1), markersize = 50-3i) for i in 1:10]
    lines!(ax,supLine(Point2f(2009,29), Point2f(2022,29); x=0,y=-3); color=blue)
    lines!(ax,supLine(Point2f(2014,29), Point2f(2016,29); x=0,y=-3); color=blue)
    text!(ax, "Threshold", position = (2014,30))
    [text!(string.(age_gf[i]), position = Point2f.(years[i], age_gf[i] .+0.5),
        align = (:center, :bottom), fontsize = 16) for i in eachindex(age_gf)]
    text!(string.(age_leo), position = Point2f.(y_xticks, age_leo .+0.5),
        align = (:center, :bottom), fontsize = 16)
    ax.xticks = (y_xticks, yd_xticks)
    ax.yticks = 0:5:55
    ylims!(ax,15,52)
    xlims!(ax,1997,2023)
    hidespines!.(ax)
    # pictures
    aximgs = [Axis(fig[2,i], aspect = 1, xlabel = join(split(names[i]), "\n"),
        xlabelcolor = blue) for i in 1:9]
    [image!(aximgs[i], rotr90(pictures[i])) for i in eachindex(pictures)]
    hidedecorations!.(aximgs; label =false)
    hidespines!.(aximgs)
    aximgs[1].xlabelcolor = "#F79D1EFF"
    limits!.(aximgs,1,78,1,78)
    # connecting lines in fig space!
    ops = [posFig(ax, mean(years[i]); yoff=250, ylow = 15) for i in 1:8]
    fps = [posFig(aximgs[i], 39; yoff=120, ylow = 78) for i in 2:9]
    supls = [supLine(posFig(ax, years[i][begin]; yoff=250, ylow = 15),
        posFig(ax, years[i][end], yoff=250, ylow = 15)) for i in 1:8]
    [lines!(fig.scene, supls[k], color = 1.2cmap[k+1]) for k in 1:8]
    [lines!(fig.scene, BezierPath(ops[k], fps[k], [ops[k][1],ops[k][2]-30],
        [fps[k][1],fps[k][2]+30]); color = 1.2cmap[k+1]) for k in 1:8]
    rowsize!(fig.layout,2,Auto(0.2))
    rowgap!(fig.layout, 60)
    Legend(fig[1,1], [legleo, leggirl], ["      Leo's age", "      Girlfriend's age"],
        halign = :left, valign = :top,tellheight=false,tellwidth=false,
        margin = (30, 10, 10, 10), framecolor = (:white,0.2))
    Label(fig[0,:], "Leo's Syndrome", color = "#F79D1EFF", textsize = 32)
    fig
    save("leo.png", fig)
end
```
