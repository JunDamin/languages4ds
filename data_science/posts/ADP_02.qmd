---
title: "ADP 준비 (2) : 탐색적 데이터 분석(EDA)"
date: 2024-02-05
categories:
  - python
  - adp
  - test
  - data
---

## 탐색적 데이터 분석이란

탐색적 데이터 분석(EDA, Exploratory Data Analysis)는 데이터를 탐색하고 이해하기 위한 분석입니다. 일반적으로 EDA는 데이터의 분포, 패턴 및 이상치를 탐색하고, 데이터에 대한 기본적인 이해를 위해 진행합니다.

### 왜 EDA를 할까?

가장 먼저는 데이터의 특성을 파악하여 데이터 분석을 위한 전략을 수립하는 데 도움이 되기 때문입니다.
데이터 특성을 파악하지 않고 기계적으로 분석을 진행하다가는 잘못된 결론에 도달하기 쉽습니다. 시애틀 평균 연봉을 측정하는데 빌게이츠와 같이 압도적인 이상치를 고려하지 않는다면, 실제보다 훨씬 큰 값을 갖게 될 것입니다.
그런 문제를 회피하기 위해서라도 EDA를 통해서 주어진 데이터 셋에 대한 이해를 해야 합니다.

두번째는 데이터에 숨은 패턴과 관계를 발견하여 데이터를 활용한 의사 결정을 내리는 데 도움이 됩니다. 단순한 통계 요약만 가지고는 보이지 않는 사항들이 있습니다. 
아래 그림은 모두 같은 평균과 분산, 상관관계를 보여줍니다. 시각적으로는 명백한 패턴을 가지고 있음에도 무작위한 결과와 통계값들은 동일함을 볼 수 있습니다.

![The Datasaurus Dozen](https://www.autodeskresearch.com/publications/samestats)

이와 같이 패턴을 놓치는 문제를 회피하기 위해서라도 EDA를 하면서 탐색하는 시간을 가져야 합니다.

마지막으로, 데이터의 문제점을 식별하고 데이터를 정리 및 전처리하는 데 힌트를 얻을 수 있습니다. 
앞서 파악한 패턴 등을 고려해서, 결측치를 어떻게 처리해야 할지, 극단치는 어떻게 처리해야 할지 의사결정을 할 수 있게 됩니다.
따라서 데이터를 올바르게 활용하기 위해서라도 반드시 시간을 투입해야 하는 작업입니다.



EDA를 수행하는 데 정해진 방법은 없지만, 가장 일반적인 방법은 데이터 시각화를 하는 것입니다. 
데이터를 시각화하면 데이터의 분포, 패턴 및 이상치를 직관적으로 식별할 수 있습니다.

데이터를 시각화하는 데 가장 많이 쓰는 플롯은 히스토그램입니다. 히스토그램은 데이터의 분포를 구간별로 해당하는 항목을 세는 방식입니다. 히스토그램을 사용하면 데이터의 중앙값, 평균값 및 표준편차를 대략적으로 볼 수 있습니다. 

또 다른 플롯은 산포도(scatter plot)입니다. 산포도는 데이터의 두 개의 변수를 시각적으로 표현한 그래프입니다. 데이터의 상관 관계가 있는지를 쉽게 보여주는 그래프입니다.


데이터를 이해하고 그 안에 숨은 패턴과 관계를 발견하기 위해 각종 통계값을 확인하기도 합니다. 중앙값 및 평균, 최대값 및 최소값, 결측값 등을 파악하여 데이터의 특성을 파악하고 데이터에 대한 이해를 높이기도 합니다.


### **EDA의 단계**

1. **데이터 수집:** 분석할 데이터를 수집합니다.
2. **데이터 정리:** 데이터를 정리하여 결측값, 오류 및 중복 데이터를 제거합니다.
3. **데이터 변환:** 데이터를 적절한 형태로 변환합니다.
4. **데이터 시각화:** 데이터를 그래프나 차트로 시각화하여 데이터의 분포와 패턴을 파악합니다.
5. **통계적 분석:** 기술 통계와 추론 통계를 사용하여 데이터의 특성을 파악합니다.
6. **가설 설정:** 데이터를 분석한 결과를 바탕으로 가설을 설정하여 데이터의 관계를 설명합니다.
7. **모델링:** 가설을 검증하기 위해 모델을 개발합니다.

### **EDA의 예**

* **판매 데이터 분석:** 판매 데이터를 분석하여 판매량의 분포, 판매량에 영향을 미치는 요인, 판매량을 증가시킬 수 있는 전략 등을 파악합니다.
* **고객 만족도 조사 분석:** 고객 만족도 조사 데이터를 분석하여 고객 만족도의 분포, 고객 만족도에 영향을 미치는 요인, 고객 만족도를 높일 수 있는 전략 등을 파악합니다.
* **생산 데이터 분석:** 생산 데이터를 분석하여 생산량의 분포, 생산량에 영향을 미치는 요인, 생산량을 증가시킬 수 있는 전략 등을 파악합니다.

### **결론**

EDA는 데이터를 이해하고 그 안에 숨은 패턴과 관계를 발견하기 위해 데이터를 조사하고 분석하는 과정입니다. EDA는 데이터 분석의 첫 단계로, 데이터의 특성을 파악하고 데이터에 대한 이해를 높이는 데 도움이 됩니다. EDA는 데이터를 활용한 의사 결정을 내리는 데 도움이 되며, 데이터 분석을 위한 전략을 수립하는 데에도 도움이 됩니다.

## 데이터를 이해하기 

### 각 컬럼의 분포를 보기
데이터의 특성을 파악하기 위해서는 각 컬럼의 분포를 확인하는 것이 중요합니다. 각 컬럼의 분포를 확인하면 데이터의 중심 경향성, 분산, 왜도, 첨도 등을 파악할 수 있습니다.

### 1. 분포 확인 방법
각 컬럼의 분포를 확인하는 방법은 다양합니다. 대표적인 방법은 다음과 같습니다.

* **히스토그램:** 히스토그램은 데이터의 분포를 그래프로 나타낸 그림입니다. 히스토그램을 보면 데이터의 중심 경향성, 분산, 왜도, 첨도 등을 파악할 수 있습니다.
* **박스 플롯:** 박스 플롯은 데이터의 분포를 그래프로 나타낸 그림입니다. 박스 플롯을 보면 데이터의 중앙 경향성, 분산, 이상치 등을 파악할 수 있습니다.
* **커널 밀도 추정:** 커널 밀도 추정은 데이터의 분포를 추정하는 방법입니다. 커널 밀도 추정을 사용하면 데이터의 확률 밀도 함수를 추정할 수 있습니다.

### 2. 분포 확인을 위한 파이썬 코드
다음은 파이썬 코드를 사용하여 각 컬럼의 분포를 확인하는 방법입니다.

```
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# 데이터를 불러옵니다.
data = pd.read_csv('data.csv')

# 각 컬럼의 분포를 확인합니다.
for column in data.columns:
    plt.hist(data[column])
    plt.title('Distribution of {}'.format(column))
    plt.show()
```

### 3. 분포 확인의 중요성
각 컬럼의 분포를 확인하는 것은 데이터의 특성을 파악하는 데 중요합니다. 각 컬럼의 분포를 확인하면 데이터의 중심 경향성, 분산, 왜도, 첨도 등을 파악할 수 있습니다. 이러한 정보는 데이터를 활용한 의사 결정을 내리는 데 도움이 됩니다.

예를 들어, 데이터의 분포가 정규 분포와 유사하면 평균과 표준 편차를 사용하여 데이터를 요약할 수 있습니다. 또한, 데이터의 분포가 왜도 또는 첨도를 갖고 있으면 평균과 표준 편차를 사용하여 데이터를 요약하는 것이 적절하지 않을 수 있습니다.


#### histogram vs kdeplot


# 히스토그램과 커널 밀도 추정 간의 비교

히스토그램과 커널 밀도 추정(KDE)은 모두 데이터의 분포를 시각화하는 데 사용할 수 있는 방법입니다. 그러나 두 가지 방법에는 몇 가지 주요 차이점이 있습니다.

## 히스토그램

* 히스토그램은 데이터를 일련의 이산 구간으로 분할하고 각 구간에 속한 데이터 포인트의 수를 계산합니다.
* 이러한 구간은 일반적으로 동일한 크기이며 데이터의 범위를 균등하게 분할합니다.
* 히스토그램은 데이터의 중심 경향성, 분산 및 모양을 보여주는 데 유용합니다.


## 커널 밀도 추정

* KDE는 데이터를 연속적인 곡선으로 표시합니다.
* 이 곡선은 데이터 포인트 주위에 가우시안 커널을 배치하여 만들어집니다.
* 커널의 너비는 데이터의 분산을 제어합니다.
* KDE는 데이터의 중심 경향성, 분산 및 모양을 보여주는 데 유용합니다. 또한 KDE는 모달성, 왜도 및 첨도와 같은 데이터의 더 미묘한 특징을 보여주는 데 사용할 수 있습니다.

## 비교

| 특성 | 히스토그램 | 커널 밀도 추정 |
|---|---|---|
| 데이터 유형 | 이산 데이터 | 연속 데이터 |
| 분포 표현 | 막대 그래프 | 부드러운 곡선 |
| 중심 경향성 | 중앙 위치를 보여줌 | 중앙 위치를 보여줌 |
| 분산 | 분산을 보여줌 | 분산을 보여줌 |
| 모양 | 모양을 보여줌 | 모양을 보여줌 |
| 모달성 | 모달성을 보여주지 않음 | 모달성을 보여줌 |
| 왜도 | 왜도를 보여주지 않음 | 왜도를 보여줌 |
| 첨도 | 첨도를 보여주지 않음 | 첨도를 보여줌 |
| 계산 복잡성 | 계산이 간단 | 계산이 복잡 |

## 예제

다음은 히스토그램과 KDE를 사용하여 동일한 데이터 세트를 시각화하는 방법의 예입니다.

```
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# 데이터를 생성합니다.
data = np.random.normal(0, 1, 1000)

# 히스토그램을 그립니다.
plt.hist(data, bins=20)
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Histogram')
plt.show()

# KDE를 그립니다.
plt.plot(kde.pdf(data))
plt.xlabel('Value')
plt.ylabel('Density')
plt.title('Kernel Density Estimation')
plt.show()
```

이 예제에서 히스토그램은 데이터의 중심 경향성과 분산을 보여주지만 KDE는 데이터의 모달성, 왜도 및 첨도와 같은 더 미묘한 특징을 보여줍니다.

### 컬럼 간 관계를 보기

# 컬럼 간 관계를 보기

이전에 나왔던 내용은 아래와 같습니다.

## 히스토그램과 커널 밀도 추정 간의 비교

히스토그램과 커널 밀도 추정(KDE)은 모두 데이터의 분포를 시각화하는 데 사용할 수 있는 방법입니다. 그러나 두 가지 방법에는 몇 가지 주요 차이점이 있습니다.

## 히스토그램

* 히스토그램은 데이터를 일련의 이산 구간으로 분할하고 각 구간에 속한 데이터 포인트의 수를 계산합니다.
* 이러한 구간은 일반적으로 동일한 크기이며 데이터의 범위를 균등하게 분할합니다.
* 히스토그램은 데이터의 중심 경향성, 분산 및 모양을 보여주는 데 유용합니다.

## 커널 밀도 추정

* KDE는 데이터를 연속적인 곡선으로 표시합니다.
* 이 곡선은 데이터 포인트 주위에 가우시안 커널을 배치하여 만들어집니다.
* 커널의 너비는 데이터의 분산을 제어합니다.
* KDE는 데이터의 중심 경향성, 분산 및 모양을 보여주는 데 유용합니다. 또한 KDE는 모달성, 왜도 및 첨도와 같은 데이터의 더 미묘한 특징을 보여주는 데 사용할 수 있습니다.

## 비교

| 특성 | 히스토그램 | 커널 밀도 추정 |
|---|---|---|
| 데이터 유형 | 이산 데이터 | 연속 데이터 |
| 분포 표현 | 막대 그래프 | 부드러운 곡선 |
| 중심 경향성 | 중앙 위치를 보여줌 | 중앙 위치를 보여줌 |
| 분산 | 분산을 보여줌 | 분산을 보여줌 |
| 모양 | 모양을 보여줌 | 모양을 보여줌 |
| 모달성 | 모달성을 보여주지 않음 | 모달성을 보여줌 |
| 왜도 | 왜도를 보여주지 않음 | 왜도를 보여줌 |
| 첨도 | 첨도를 보여주지 않음 | 첨도를 보여줌 |
| 계산 복잡성 | 계산이 간단 | 계산이 복잡 |

## 예제

다음은 히스토그램과 KDE를 사용하여 동일한 데이터 세트를 시각화하는 방법의 예입니다.

```
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# 데이터를 생성합니다.
data = np.random.normal(0, 1, 1000)

# 히스토그램을 그립니다.
plt.hist(data, bins=20)
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Histogram')
plt.show()

# KDE를 그립니다.
plt.plot(kde.pdf(data))
plt.xlabel('Value')
plt.ylabel('Density')
plt.title('Kernel Density Estimation')
plt.show()
```

이 예제에서 히스토그램은 데이터의 중심 경향성과 분산을 보여주지만 KDE는 데이터의 모달성, 왜도 및 첨도와 같은 더 미묘한 특징을 보여줍니다.

## 컬럼 간 관계를 보기

데이터 세트의 컬럼 간 관계를 시각화하는 데는 여러 가지 방법이 있습니다. 가장 일반적인 방법 중 일부는 다음과 같습니다.

* **스캐터 플롯:** 이것은 두 개의 변수 간의 관계를 시각화하는 데 사용됩니다. 하나의 변수는 x 축에 플로팅되고 다른 변수는 y 축에 플로팅됩니다. 점의 위치는 두 변수의 값에 의해 결정됩니다.
* **상관 행렬:** 이것은 데이터 세트의 모든 변수 간의 상관 관계를 보여주는 표입니다. 상관 관계는 -1과 +1 사이의 값이며, 상관 관계가 높을수록 두 변수가 더 강하게 연관되어 있음을 나타냅니다.
* **히트 맵:** 이것은 데이터 세트의 두 변수 간의 상관 관계를 보여주는 그래프입니다. 변수 중 하나는 행으로 표시되고 다른 변수는 열로 표시됩니다. 상관 관계는 각 셀의 색상에 의해 나타납니다.
* **패널 플롯:** 이것은 여러 개의 스캐터 플롯을 한 장의 그래프에 표시하는 것입니다. 이렇게 하면 데이터 세트의 여러 변수 간의 관계를 비교하는 것이 쉬워집니다.

데이터 세트의 컬럼 간 관계를 시각화하는 방법을 선택할 때 고려해야 할 몇 가지 사항은 다음과 같습니다.

* 시각화하려는 관계의 유형
* 데이터 세트의 크기
* 데이터의 유형

다음은 데이터 세트의 컬럼 간 관계를 시각화하는 방법에 대한 몇 가지 예입니다.

* **스캐터 플롯:** 다음은 두 개의 변수 간의 관계를 보여주는 스캐터 플롯의 예입니다.

```
import matplotlib.pyplot as plt
import numpy as np

# 데이터를 생성합니다.
x = np.random.normal(0, 1, 1000)
y = np.random.normal(0, 1, 1000)

# 스캐터 플롯을 그립니다.
plt.scatter(x, y)
plt.xlabel('x')
plt.ylabel('y')
plt.title('Scatter Plot')
plt.show()
```

이 스캐터 플롯은 두 변수 간에 강한 양의 상관 관계가 있음을 보여줍니다.

* **상관 행렬:** 다음은 데이터 세트의 모든 변수 간의 상관 관계를 보여주는 상관 행렬의 예입니다.

```
import numpy as np
import pandas as pd

# 데이터를 생성합니다.
data = np.random.normal(0, 1, (1000, 10))

# 상관 행렬을 계산합니다.
corr_matrix = np.corrcoef(data)

# 상관 행렬을 프린트합니다.
print(corr_matrix)
```

이 상관 행렬은 데이터 세트의 모든 변수 간에 강한 양의 상관 관계가 있음을 보여줍니다.

* **히트 맵:** 다음은 데이터 세트의 두 변수 간의 상관 관계를 보여주는 히트 맵의 예입니다.

```
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# 데이터를 생성합니다.
data = np.random.normal(0, 1, (1000, 10))

# 상관 행렬을 계산합니다.
corr_matrix = np.corrcoef(data)

# 히트 맵을 그립니다.
plt.imshow(corr_matrix, cmap='RdYlBu')
plt.colorbar()
plt.title('Heat Map')
plt.show()
```

이 히트 맵은 데이터 세트의 두 변수 간에 강한 양의 상관 관계가 있음을 보여줍니다.

* **패널 플롯:** 다음은 여러 개의 스캐터 플롯을 한 장의 그래프에 표시하는 패널 플롯의 예입니다.

```
import matplotlib.pyplot as plt
import numpy as np

# 데이터를 생성합니다.
x = np.random.normal(0, 1, (1000, 10))
y = np.random.normal(0, 1, (1000, 10))

# 패널 플롯을 그립니다.
fig, axes = plt.subplots(2, 5, figsize=(15, 10))

for i in range(10):
    axes[i // 5, i % 5].scatter(x[:, i], y[:, i])
    axes[i // 5, i % 5].set_title(f'Variable {i + 1}')

plt.tight_layout()
plt.show()
```

이 패널 플롯은 데이터 세트의 여러 변수 간의 관계를 비교하는 것이 쉽다는 것을 보여줍니다.

#### pairplot

**pairplot**

#### 외부 레퍼런스

* [matplotlib.pyplot.scatter](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.scatter.html)
* [numpy.corrcoef](https://numpy.org/doc/stable/reference/generated/numpy.corrcoef.html)
* [pandas.DataFrame.corr](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.corr.html)
* [seaborn.pairplot](https://seaborn.pydata.org/generated/seaborn.pairplot.html)

**코드 예제**

```python
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

# 데이터를 생성합니다.
data = np.random.normal(0, 1, (1000, 10))

# pairplot을 그립니다.
sns.pairplot(data)
plt.show()
```

**출력**

[Image of pairplot]

#### pairplot의 장점과 단점

**장점**

* 데이터 세트의 여러 변수 간의 관계를 한눈에 볼 수 있습니다.
* 변수 간의 상관 관계를 쉽게 확인할 수 있습니다.
* 변수 간의 비선형 관계를 식별하는 데 도움이 될 수 있습니다.

**단점**

* 변수가 많은 데이터 세트의 경우 해석하기 어려울 수 있습니다.
* pairplot은 변수 간의 인과 관계를 보여주지 않습니다.

#### pairplot의 사용 사례

pairplot은 다음과 같은 경우에 유용합니다.

* 데이터 세트의 변수 간의 관계를 탐색할 때
* 변수 간의 상관 관계를 식별할 때
* 변수 간의 비선형 관계를 식별할 때
* 변수를 선택할 때
* 모델을 개발할 때

#### 결론

pairplot은 데이터 세트의 변수 간의 관계를 시각화하는 데 유용한 도구입니다. pairplot을 사용하면 변수 간의 상관 관계를 쉽게 확인할 수 있고 변수 간의 비선형 관계를 식별하는 데 도움이 될 수 있습니다. pairplot은 데이터 세트의 변수를 선택하고 모델을 개발할 때 유용합니다.

### 결측치 확인하기 

**결측치 확인하기**

결측치는 데이터 세트에서 종종 발생하는 문제입니다. 결측치는 다양한 이유로 발생할 수 있으며, 결측치가 발생하면 데이터 분석에 부정적인 영향을 미칠 수 있습니다. 따라서 결측치를 확인하고 적절하게 처리하는 것이 중요합니다.

**결측치 확인 방법**

결측치를 확인하는 방법에는 여러 가지가 있습니다. 가장 간단한 방법은 데이터 세트의 각 행과 열을 살펴보고 결측치가 있는지 확인하는 것입니다. 그러나 이 방법은 데이터 세트가 큰 경우에는 시간이 많이 걸릴 수 있습니다.

결측치를 확인하는 보다 효율적인 방법은 결측치를 찾는 데 도움이 되는 통계 패키지를 사용하는 것입니다. 예를 들어, 파이썬의 pandas 패키지는 결측치를 확인하는 데 사용할 수 있는 isnull() 메서드를 제공합니다.

```python
import pandas as pd

data = pd.DataFrame({'A': [1, 2, np.nan], 'B': [3, np.nan, 5]})

print(data.isnull())
```

**출력**

```
   A   B
0  False  False
1  False   True
2  False  False
```

isnull() 메서드는 결측치가 있는 행과 열을 True로 표시합니다. 위의 출력에서 볼 수 있듯이 데이터 세트의 두 번째 행의 B 열에 결측치가 있습니다.

결측치를 확인하는 또 다른 방법은 히스토그램을 그리는 것입니다. 히스토그램은 데이터의 분포를 보여주는 그래프입니다. 결측치가 있는 열의 히스토그램을 그리면 결측치가 있는 부분에 빈 공간이 생깁니다.

```python
import matplotlib.pyplot as plt
import numpy as np

data = np.random.normal(0, 1, (1000, 10))
data[::100, 5] = np.nan

plt.hist(data[:, 5])
plt.show()
```

**출력**

[Image of histogram]

위의 그래프에서 볼 수 있듯이 데이터 세트의 여섯 번째 열에는 결측치가 있습니다.

**결측치 처리 방법**

결측치를 확인한 후에는 적절하게 처리해야 합니다. 결측치를 처리하는 방법에는 여러 가지가 있으며, 사용할 방법은 결측치의 원인과 결측치의 양에 따라 결정됩니다.

가장 간단한 방법은 결측치를 삭제하는 것입니다. 그러나 결측치를 삭제하면 데이터 세트의 크기가 줄어들고 데이터의 분포가 변경될 수 있습니다. 따라서 결측치를 삭제하기 전에 결측치의 원인을 파악하고 결측치를 삭제할 경우의 영향을 고려해야 합니다.

결측치를 삭제하지 않는 방법으로는 결측치를 평균, 중앙값, 최빈값 등으로 imputed하는 방법이 있습니다. imputed는 결측치를 추정하는 것을 의미합니다. 결측치를 imputed할 때에는 결측치의 분포와 결측치의 원인을 고려해야 합니다.

결측치를 처리하는 또 다른 방법은 결측치를 추정하는 모델을 만드는 것입니다. 이 방법은 결측치의 원인과 결측치의 양이 많은 경우에 유용합니다. 결측치를 추정하는 모델을 만들 때에는 결측치의 분포와 결측치의 원인을 고려해야 합니다.

**결론**

결측치는 데이터 세트에서 종종 발생하는 문제입니다. 결측치는 다양한 이유로 발생할 수 있으며, 결측치가 발생하면 데이터 분석에 부정적인 영향을 미칠 수 있습니다. 따라서 결측치를 확인하고 적절하게 처리하는 것이 중요합니다.

### 이상치 확인하기

# 1. 이상치 확인하기


**목표**

이상치(outlier)는 데이터 세트에서 다른 데이터 포인트와 크게 다른 데이터 포인트입니다. 이상치는 다양한 이유로 발생할 수 있으며, 이상치가 발생하면 데이터 분석에 부정적인 영향을 미칠 수 있습니다. 따라서 이상치를 확인하고 적절하게 처리하는 것이 중요합니다.

**이상치 확인 방법**

이상치를 확인하는 방법에는 여러 가지가 있습니다. 가장 간단한 방법은 데이터 세트의 각 데이터 포인트를 살펴보고 다른 데이터 포인트와 크게 다른 데이터 포인트를 찾는 것입니다. 그러나 이 방법은 데이터 세트가 큰 경우에는 시간이 많이 걸릴 수 있습니다.

이상치를 확인하는 보다 효율적인 방법은 이상치를 찾는 데 도움이 되는 통계 패키지를 사용하는 것입니다. 예를 들어, 파이썬의 pandas 패키지는 이상치를 확인하는 데 사용할 수 있는 isoutlier() 메서드를 제공합니다.

```python
import pandas as pd

data = pd.DataFrame({'A': [1, 2, 100], 'B': [3, 4, 5]})

print(data.isoutlier())
```

**출력**

```
   A   B
0  False  False
1  False  False
2   True  False
```

isoutlier() 메서드는 이상치인 데이터 포인트를 True로 표시합니다. 위의 출력에서 볼 수 있듯이 데이터 세트의 세 번째 행의 A 열은 이상치입니다.

이상치를 확인하는 또 다른 방법은 박스 플롯을 그리는 것입니다. 박스 플롯은 데이터의 중앙값, 사분위수, 최대값, 최소값을 보여주는 그래프입니다. 이상치는 박스 플롯에서 벗어난 데이터 포인트로 표시됩니다.

```python
import matplotlib.pyplot as plt
import numpy as np

data = np.random.normal(0, 1, (1000, 10))
data[::100, 5] = 100

plt.boxplot(data[:, 5])
plt.show()
```

**출력**

[Image of box plot]

위의 그래프에서 볼 수 있듯이 데이터 세트의 여섯 번째 열에는 이상치가 있습니다.

**이상치 처리 방법**

이상치를 확인한 후에는 적절하게 처리해야 합니다. 이상치를 처리하는 방법에는 여러 가지가 있으며, 사용할 방법은 이상치의 원인과 이상치의 양에 따라 결정됩니다.

가장 간단한 방법은 이상치를 삭제하는 것입니다. 그러나 이상치를 삭제하면 데이터 세트의 크기가 줄어들고 데이터의 분포가 변경될 수 있습니다. 따라서 이상치를 삭제하기 전에 이상치의 원인을 파악하고 이상치를 삭제할 경우의 영향을 고려해야 합니다.

이상치를 삭제하지 않는 방법으로는 이상치를 평균, 중앙값, 최빈값 등으로 imputed하는 방법이 있습니다. imputed는 이상치를 추정하는 것을 의미합니다. 이상치를 imputed할 때에는 이상치의 분포와 이상치의 원인을 고려해야 합니다.

이상치를 처리하는 또 다른 방법은 이상치를 추정하는 모델을 만드는 것입니다. 이 방법은 이상치의 원인과 이상치의 양이 많은 경우에 유용합니다. 이상치를 추정하는 모델을 만들 때에는 이상치의 분포와 이상치의 원인을 고려해야 합니다.

**결론**

이상치는 데이터 세트에서 종종 발생하는 문제입니다. 이상치는 다양한 이유로 발생할 수 있으며, 이상치가 발생하면 데이터 분석에 부정적인 영향을 미칠 수 있습니다. 따라서 이상치를 확인하고 적절하게 처리하는 것이 중요합니다.

**이상치 확인 및 처리에 대한 추가 참고 자료**

* [Pandas의 isoutlier() 메서드](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.isoutlier.html)
* [Matplotlib의 박스 플롯](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.boxplot.html)
* [이상치 처리 방법](https://www.kdnuggets.com/2019/03/outliers-detection-treatment.html)

## 해석하기

**2. 결측값 처리하기**

**목표**

결측값(missing value)은 데이터 세트에서 값이 없는 데이터 포인트입니다. 결측값은 다양한 이유로 발생할 수 있으며, 결측값이 발생하면 데이터 분석에 부정적인 영향을 미칠 수 있습니다. 따라서 결측값을 확인하고 적절하게 처리하는 것이 중요합니다.

**결측값 확인 방법**

결측값을 확인하는 방법에는 여러 가지가 있습니다. 가장 간단한 방법은 데이터 세트의 각 데이터 포인트를 살펴보고 값이 없는 데이터 포인트를 찾는 것입니다. 그러나 이 방법은 데이터 세트가 큰 경우에는 시간이 많이 걸릴 수 있습니다.

결측값을 확인하는 보다 효율적인 방법은 결측값을 찾는 데 도움이 되는 통계 패키지를 사용하는 것입니다. 예를 들어, 파이썬의 pandas 패키지는 결측값을 확인하는 데 사용할 수 있는 isnull() 메서드를 제공합니다.

```python
import pandas as pd

data = pd.DataFrame({'A': [1, 2, None], 'B': [3, None, 5]})

print(data.isnull())
```

**출력**

```
   A   B
0  False  False
1  False   True
2   True  False
```

isnull() 메서드는 결측값인 데이터 포인트를 True로 표시합니다. 위의 출력에서 볼 수 있듯이 데이터 세트의 두 번째 행의 B 열과 세 번째 행의 A 열은 결측값입니다.

결측값을 확인하는 또 다른 방법은 히트맵을 그리는 것입니다. 히트맵은 데이터의 결측값을 시각적으로 표시하는 그래프입니다. 결측값이 많은 데이터 포인트는 히트맵에서 짙은 색상으로 표시됩니다.

```python
import seaborn as sns

data = pd.DataFrame({'A': [1, 2, None], 'B': [3, None, 5]})

sns.heatmap(data.isnull(), cbar=False)
plt.show()
```

**출력**

[Image of heatmap]

위의 그래프에서 볼 수 있듯이 데이터 세트의 두 번째 행의 B 열과 세 번째 행의 A 열은 결측값입니다.

**결측값 처리 방법**

결측값을 확인한 후에는 적절하게 처리해야 합니다. 결측값을 처리하는 방법에는 여러 가지가 있으며, 사용할 방법은 결측값의 원인과 결측값의 양에 따라 결정됩니다.

가장 간단한 방법은 결측값을 삭제하는 것입니다. 그러나 결측값을 삭제하면 데이터 세트의 크기가 줄어들고 데이터의 분포가 변경될 수 있습니다. 따라서 결측값을 삭제하기 전에 결측값의 원인을 파악하고 결측값을 삭제할 경우의 영향을 고려해야 합니다.

결측값을 삭제하지 않는 방법으로는 결측값을 평균, 중앙값, 최빈값 등으로 imputed하는 방법이 있습니다. imputed는 결측값을 추정하는 것을 의미합니다. 결측값을 imputed할 때에는 결측값의 분포와 결측값의 원인을 고려해야 합니다.

결측값을 처리하는 또 다른 방법은 결측값을 추정하는 모델을 만드는 것입니다. 이 방법은 결측값의 원인과 결측값의 양이 많은 경우에 유용합니다. 결측값을 추정하는 모델을 만들 때에는 결측값의 분포와 결측값의 원인을 고려해야 합니다.

**결론**

결측값은 데이터 세트에서 종종 발생하는 문제입니다. 결측값은 다양한 이유로 발생할 수 있으며, 결측값이 발생하면 데이터 분석에 부정적인 영향을 미칠 수 있습니다. 따라서 결측값을 확인하고 적절하게 처리하는 것이 중요합니다.

**결측값 확인 및 처리에 대한 추가 참고 자료**

* [Pandas의 isnull() 메서드](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.isnull.html)
* [Seaborn의 히트맵](https://seaborn.pydata.org/generated/seaborn.heatmap.html)
* [결측값 처리 방법](https://www.kdnuggets.com/2019/03/missing-data-detection-treatment.html)

### 어떤 데이터 타입인가?

### 어떤 데이터 타입인가?

데이터 타입은 데이터의 종류를 나타냅니다. 데이터 타입은 데이터의 값의 범위와 데이터의 연산을 결정합니다.

파이썬에는 다양한 데이터 타입이 있습니다. 가장 기본적인 데이터 타입은 다음과 같습니다.

* 정수(int): 정수는 음수 또는 양수의 정수입니다.
* 부동 소수점(float): 부동 소수점은 실수입니다.
* 문자열(str): 문자열은 문자나 기호로 구성된 순서입니다.
* 불리언(bool): 불리언은 True 또는 False를 나타냅니다.

이러한 기본 데이터 타입 외에도 파이썬에는 다음과 같은 다른 데이터 타입이 있습니다.

* 복소수(complex): 복소수는 실수 부분과 허수 부



### 어떤 분포를 보이는가?

쌍봉인가?
이진 분포인가?

# 어떤 분포를 보이는가?

분포는 데이터가 어떻게 분포되어 있는지 설명하는 방법입니다. 분포는 데이터의 모양을 이해하고 데이터의 특성을 식별하는 데 도움이 됩니다.

파이썬에는 데이터의 분포를 분석하는 데 도움이 되는 다양한 통계 함수가 있습니다. 가장 일반적으로 사용되는 통계 함수는 다음과 같습니다.

* mean(): 평균을 계산합니다.
* median(): 중앙값을 계산합니다.
* mode(): 최빈값을 계산합니다.
* std(): 표준 편차를 계산합니다.
* var(): 분산을 계산합니다.

이러한 통계 함수 외에도 파이썬에는 데이터의 분포를 시각화하는 데 도움이 되는 다양한 라이브러리가 있습니다. 가장 일반적으로 사용되는 라이브러리는 다음과 같습니다.

* matplotlib: 2D 플롯을 만드는 데 사용됩니다.
* seaborn: 통계 데이터를 시각화하는 데 사용됩니다.
* plotly: 3D 플롯을 만드는 데 사용됩니다.

다음은 파이썬을 사용하여 데이터의 분포를 분석하고 시각화하는 방법의 예입니다.

```python
import matplotlib.pyplot as plt
import numpy as np

# 데이터를 생성합니다.
data = np.random.normal(0, 1, 1000)

# 데이터의 분포를 분석합니다.
mean = np.mean(data)
median = np.median(data)
mode = np.mode(data)
std = np.std(data)
var = np.var(data)

# 데이터의 분포를 시각화합니다.
plt.hist(data, bins=20)
plt.show()
```

위의 코드는 정규 분포를 따르는 1000개의 난수를 생성합니다. 생성된 난수의 분포는 히스토그램으로 시각화됩니다. 히스토그램은 데이터가 정규 분포를 따르고 있음을 보여줍니다.

데이터의 분포를 이해하는 것은 데이터의 특성을 식별하고 데이터에 대한 통계적 추론을 하는 데 도움이 됩니다. 데이터의 분포를 분석하고 시각화하면 데이터에 대한 더 많은 정보를 얻을 수 있습니다.

다음은 데이터의 분포를 분석하고 시각화하는 데 유용한 추가적인 리소스입니다.

* [파이썬으로 데이터의 분포를 분석하는 방법](https://www.datacamp.com/courses/exploratory-data-analysis-in-python)
* [파이썬으로 데이터의 분포를 시각화하는 방법](https://www.datacamp.com/courses/data-visualization-with-python)
* [파이썬으로 데이터의 분포를 분석하고 시각화하는 방법에 대한 튜토리얼](https://www.youtube.com/watch?v=P5J63J1nflo)

### 관계가 있는가? 

비례하는가?

이후 어떤 검정을 하는 것이 좋은지 생각해 보자.



데이터의 분포를 분석하면 데이터 간의 관계를 식별하는 데 도움이 될 수 있습니다. 데이터 간의 관계는 산점도를 사용하여 시각화할 수 있습니다. 산점도는 데이터의 두 개의 변수를 나타내는 2차원 플롯입니다.

산점도를 사용하여 데이터 간의 관계를 식별하는 방법은 다음과 같습니다.

1. 산점도를 만듭니다.
2. 산점도의 패턴을 살펴봅니다.
3. 산점도의 패턴을 해석합니다.

산점도의 패턴은 데이터 간의 관계를 나타냅니다. 산점도의 패턴을 해석하여 데이터 간의 관계를 식별할 수 있습니다.

다음은 데이터 간의 관계를 식별하기 위해 산점도를 사용하는 방법의 예입니다.

```python
import matplotlib.pyplot as plt
import numpy as np

# 데이터를 생성합니다.
x = np.random.normal(0, 1, 1000)
y = np.random.normal(0, 1, 1000)

# 산점도를 만듭니다.
plt.scatter(x, y)
plt.show()
```

위의 코드는 정규 분포를 따르는 1000개의 난수를 생성합니다. 생성된 난수는 산점도로 시각화됩니다. 산점도는 데이터 간에 상관관계가 있음을 보여줍니다.

데이터 간의 관계를 식별하는 것은 데이터의 특성을 이해하고 데이터에 대한 통계적 추론을 하는 데 도움이 됩니다. 데이터 간의 관계를 분석하고 시각화하면 데이터에 대한 더 많은 정보를 얻을 수 있습니다.

다음은 데이터 간의 관계를 분석하고 시각화하는 데 유용한 추가적인 리소스입니다.

* [파이썬으로 데이터 간의 관계를 분석하는 방법](https://www.datacamp.com/courses/exploratory-data-analysis-in-python)
* [파이썬으로 데이터 간의 관계를 시각화하는 방법](https://www.datacamp.com/courses/data-visualization-with-python)
* [파이썬으로 데이터 간의 관계를 분석하고 시각화하는 방법에 대한 튜토리얼](https://www.youtube.com/watch?v=P5J63J1nflo)


### 결측치가 특이하진 않는가?

### 이상치는 무엇인가?

결측치는 데이터 세트에서 값이 없는 관측치입니다. 결측치는 다양한 이유로 발생할 수 있으며, 결측치의 처리 방법은 결측치의 원인에 따라 다릅니다.

결측치를 처리하는 가장 간단한 방법 중 하나는 결측치를 삭제하는 것입니다. 그러나 결측치를 삭제하면 데이터의 크기가 줄어들고 데이터의 정확도가 떨어질 수 있습니다.

결측치를 처리하는 또 다른 방법은 결측치를 추정하는 것입니다. 결측치를 추정하는 방법은 다양하며, 추정 방법은 결측치의 원인과 결측치의 분포에 따라 다릅니다.

결측치를 추정하는 가장 일반적인 방법 중 하나는 평균값을 사용하는 것입니다. 평균값을 사용하여 결측치를 추정하면 결측치의 값이 데이터의 평균값과 같다고 가정합니다.

결측치를 추정하는 또 다른 방법은 중앙값을 사용하는 것입니다. 중앙값을 사용하여 결측치를 추정하면 결측치의 값이 데이터의 중앙값과 같다고 가정합니다.

결측치를 추정하는 또 다른 방법은 k-최근 이웃 알고리즘을 사용하는 것입니다. k-최근 이웃 알고리즘은 결측치의 값을 결측치와 유사한 다른 관측치의 값을 사용하여 추정합니다.

결측치를 처리하는 방법은 결측치의 원인과 결측치의 분포에 따라 다릅니다. 결측치를 처리하는 방법을 선택할 때는 결측치의 원인과 결측치의 분포를 고려해야 합니다.

## pairplot을 그려보자

다음은 결측치를 처리하는 방법을 보여주는 예제입니다.

```python
import pandas as pd

# 데이터를 불러옵니다.
데이터 = pd.read_csv('결측치_데이터.csv')

# 결측치를 확인합니다.
print(데이터.isnull().sum())

# 결측치를 평균값으로 추정합니다.
데이터.fillna(데이터.mean(), inplace=True)

# 결측치를 확인합니다.
print(데이터.isnull().sum())
```

이 예제에서는 `결측치_데이터.csv` 파일에서 데이터를 불러와서 결측치를 확인합니다. 결측치는 `isnull()` 함수를 사용하여 확인할 수 있습니다. `isnull()` 함수는 결측치가 있는 관측치를 `True`로, 결측치가 없는 관측치를 `False`로 반환합니다.

결측치를 확인한 후에는 결측치를 평균값으로 추정합니다. 결측치를 평균값으로 추정하려면 `fillna()` 함수를 사용합니다. `fillna()` 함수는 결측치를 지정된 값으로 채웁니다. 이 예제에서는 결측치를 데이터의 평균값으로 채웁니다.

결측치를 평균값으로 추정한 후에는 결측치를 다시 확인합니다. 결측치를 확인한 결과 결측치가 모두 채워진 것을 확인할 수 있습니다.

이 예제에서는 결측치를 평균값으로 추정했지만, 결측치를 추정하는 방법은 결측치의 원인과 결측치의 분포에 따라 다릅니다. 결측치를 추정하는 방법을 선택할 때는 결측치의 원인과 결측치의 분포를 고려해야 합니다.