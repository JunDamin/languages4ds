---
title: "ADP 준비 (2) : 탐색적 데이터 분석(EDA)"
date: 2024-02-05
categories:
  - python
  - adp
  - test
  - data
---

## 탐색적 데이터 분석이란

탐색적 데이터 분석(EDA, Exploratory Data Analysis)는 데이터를 탐색하고 이해하기 위한 분석입니다. 일반적으로 EDA는 데이터의 분포, 패턴 및 이상치를 탐색하고, 데이터에 대한 기본적인 이해를 위해 진행합니다.

### 왜 EDA를 할까?

가장 먼저는 데이터의 특성을 파악하여 데이터 분석을 위한 전략을 수립하는 데 도움이 되기 때문입니다. 데이터 특성을 파악하지 않고 기계적으로 분석을 진행하다가는 잘못된 결론에 도달하기 쉽습니다. 시애틀 평균 연봉을 측정하는데 빌게이츠와 같이 압도적인 이상치를 고려하지 않는다면, 실제보다 훨씬 큰 값을 갖게 될 것입니다. 그런 문제를 회피하기 위해서라도 EDA를 통해서 주어진 데이터 셋에 대한 이해를 해야 합니다.

두번째는 데이터에 숨은 패턴과 관계를 발견하여 데이터를 활용한 의사 결정을 내리는 데 도움이 됩니다. 단순한 통계 요약만 가지고는 보이지 않는 사항들이 있습니다. 아래 그림은 모두 같은 평균과 분산, 상관관계를 보여줍니다. 시각적으로는 명백한 패턴을 가지고 있음에도 무작위한 결과와 통계값들은 동일함을 볼 수 있습니다.

![The Datasaurus Dozen](https://www.research.autodesk.com/app/uploads/2023/03/AllDinos-2.png)

이와 같이 패턴을 놓치는 문제를 회피하기 위해서라도 EDA를 하면서 탐색하는 시간을 가져야 합니다.

마지막으로, 데이터의 문제점을 식별하고 데이터를 정리 및 전처리하는 데 힌트를 얻을 수 있습니다. 앞서 파악한 패턴 등을 고려해서, 결측치를 어떻게 처리해야 할지, 극단치는 어떻게 처리해야 할지 의사결정을 할 수 있게 됩니다. 따라서 데이터를 올바르게 활용하기 위해서라도 반드시 시간을 투입해야 하는 작업입니다.

### 어떻게 EDA를 할까?

EDA를 수행하는 데 정해진 방법은 없지만, 가장 일반적인 방법은 통계값을 확인하는 것과 데이터 시각화를 하는 것입니다.

먼저 데이터를 이해하고 그 안에 숨은 패턴과 관계를 발견하기 위해 각종 통계값을 확인합니다. 중앙값 및 평균, 최대값 및 최소값, 결측치 등을 파악하여 데이터의 특성을 파악하고 데이터의 계량적인 특성을 파악 합니다.

또한、데이터를 시각화합니다。시각화를 통해 데이터의 분포, 패턴 및 이상치를 직관적으로 식별할 수 있습니다. 데이터를 시각화하는 데 가장 많이 쓰는 플롯은 히스토그램입니다. 히스토그램은 데이터의 분포를 구간별로 해당하는 항목을 세는 방식입니다. 히스토그램을 사용하면 데이터의 중앙값, 평균값 및 표준편차를 대략적으로 볼 수 있습니다. 또 다른 플롯은 산포도(scatter plot)입니다. 산포도는 데이터의 두 개의 변수를 시각적으로 표현한 그래프입니다. 데이터의 상관 관계가 있는지를 쉽게 보여주는 그래프입니다.

## 데이터 EDA 진행하기

### 데이터 불러오기

EDA를 직접 해보고자 합니다. 이를 위해서 우선 데이터를 불러옵니다. 데이터는 [Datamanin에서 공유한 ADP 29회 대구도시공사_빅데이터_영구임대아파트 입주자 퇴거여부 데이터, 고유번호를 가진 계약자와 특정 아파트에 대해 매년 퇴거여부를 기록한 데이터](https://www.datamanim.com/dataset/ADPpb/00/29.html)입니다.

```{python}
import pandas as pd

data = pd.read_csv("https://raw.githubusercontent.com/Datamanim/datarepo/main/adp/29/p1.csv", encoding="cp949")
data.shape
```

`pandas`를 사용해 데이터를 불러왔습니다. 총 23개의 컬럼이 있으며 86,904개의 레코드가 있습니다.

### 자료형 파악하기

자료형을 파악해 봅니다. 자료형을 가지고 해당 데이터에 대한 정보를 얻을 수 있습니다. `pandas`에서 사용하는 자료형(data type)은 float64, int64, object, datetime64 등이 있습니다. 이를 통해서 어떤 자료가 범주형인지,

```{python}
data.info()
```

### 각 컬럼의 통계값 확인하기

데이터의 특성을 파악하기 위해 우선 기초 통계량을 확인해 보겠습니다.

pandas에서는 숫자형 자료에 대해서는 `describe`메소드를 사용하여 평균과 중간값 표준편차 등을 확인할 수 있습니다.

```{python}
data.describe()
```

중앙값과 평균과의 차이가 가장 큰 순서대로 정렬을 해봅시다.

```{python}
summary = data.describe()
values = (summary.loc["50%"] - summary.loc["mean"]).abs()  # 중간값과 평균 차이의 절대값
sorted_columns = (values/summary.loc["mean"]).sort_values(ascending=False).index # 평균으로 나누어 정규화

summary[sorted_columns]
```

거주자 수와 보증금, 월세, 거주개월 등은 평균과 중간값의 차이가 상대적으로 크다는 걸 알 수 있습니다.

이는 이 데이터들은 안쪽으로 쏠려 있음을 추정해 볼 수 있습니다.

평균이 중간값보다 큰 것을 통해서 높은쪽으로 쏠려 있음을 알 수 있습니다.

그럼 이들 값들의 분포를 확인하는 그래프를 그려 보도록 하겠습니다.

### 분포 그려보기

각 컬럼의 분포를 확인하는 방법은 다양합니다. 대표적인 방법은 히스토그램을 그리는 것입니다.

히스토그램이란 구간을 정하고 각 구간별에 해당하는 데이터 값의 갯수를 확인하는 방법입니다. 수치 데이터 뿐만 아니라 범주형 데이터에도 쉽게 적용할 수 있어 가장 빈번하게 사용되는 방법 중 하나입니다.

파이썬에는 많은 라이브러리가 있지만, 오늘은 `seaborn`을 사용해 그려 보겠습니다. `seaborn`은 `matplotlib`을 기반으로 만들어진 그래프 라이브러리입니다. 안타깝게도 `matplotlib`에서는 한글을 바로 지원하지 않기 때문에 한글 폰트를 지정해서 사용하도록 하겠습니다.

```{python}
import seaborn as sns
import matplotlib.pyplot as plt

plt.rc('font', family='NanumGothic')
plt.style.use("ggplot")
```

::: {.callout-caution title="matplotlib에서 한글 사용하기"}
`matplotlib`에서 기본 폰트는 영문만 지원하여 별도로 한글 폰트를 지정하지 않으면 한글 데이터는 네모 박스로 표시되게 됩니다.

저는 `나눔고딕`을 설치했는데, 다른 폰트를 사용한다면 다른 이름으로 지정해야 합니다.

어떤 폰트가 있는지 확인하고 싶으시다면, `font_manager`의 `get_font_names` 메소드를 사용하면 됩니다.

```{python}
#| eval: false
from matplotlib import font_manager

font_manager.get_font_names()

```
:::

#### histogram을 그려 봅니다.

```{python}

sns.histplot(data=data, x="거주자 수")
plt.show()
```

값이 이산적인 경우 `bins`를 지정하면 좀더 깔끔하게 정리됩니다.

```{python}

sns.histplot(data=data, x="거주자 수", bins=10)
plt.show()
```

여러 컬럼을 동시에 확인하고 싶으면 아래와 같이 진행할 수 있습니다.

```{python}
n = len(data.columns)
ncols = 4  # 열의 수를 지정합니다.
nrows = n//ncols + (0 if n%ncols == 0 else 1) #row 갯수를 정합니다. 딱 떨어지지 않으면 1줄을 더 추가합니다.
fig, axes = plt.subplots(nrows, ncols, figsize=(9, 9))   # 4열로 생성합니다. 
for i, column in enumerate(data.columns):
  i, j = i//4, i%4   # 위치를 잡습니다.
  ax = axes[i][j]
  sns.histplot(data=data, x=column, ax=ax)
  
plt.tight_layout()
plt.show()
```

### 상관관계를 파악해 보기

수치형 데이터 간의 상관관계를 파악해 봅니다. 우선 수치형 데이터만 남겨 봅시다.

```{python}
number_data = data.select_dtypes(include=["number", "datetime"])
number_data.head()
```

데이터를 보면 아이디로 사용되어 수치가 의미가 없는 것을 제거하겠습니다.

```{python}
number_data = number_data.drop(['아파트 ID', '호실고유번호','계약자고유번호', '계약서고유번호', ], axis=1)
```

`DataFrame`의 `corr` 메소드로 쉽게 확인할 수 있습니다.

```{python}
number_data.corr()
```

#### heatmap으로 시각화 하기

아래와 같이 쉽게 heatmap을 그릴 수 있습니다.

```{python}
sns.heatmap(number_data.corr(), cmap='coolwarm', vmin=-1, vmax=1)
plt.show()
```

가장 먼저 눈에 띄는 것은 재계약횟수와 거주개월, 월세와 보증금, 대표나이와 나이 사이에는 아주 강한 선형적 상관관계가 있다는 점입니다. 다중공선성을 고려 해 통계 모델을 구성한다면 이는 조심해야 하는 것으로 판단됩니다.

항목이 많아 눈에 띄는 것들만 살펴 보면 우선 입주연도와 재계약횟수, 거주개월이 음의 상관관계가 있음을 볼 수 있습니다. 또한, 평형대가 클 수록 거주자 수가 많으며, 월세가 높은 집이 보증금도 크다는 걸 볼 수 있습니다.

이런 논리적으로 당연히 그럴 것이라고 판단되는 것들도 있지만, 의외의 것들도 있습니다.

재계약 횟수가 많을 수록 월세와 보증금이 큰 것을 볼 수 있습니다. 재계약을 하면서 가격이 올라간 것인지, 아니면 오래된 단지는 주변이 중심지화 되어서 그런 것인지 궁금합니다.

또 하나 재미있는 것은 평점이 순번과 상관이 있는 지점입니다. 만약 순번이 오래된 것에서 부터 하나씩 매겨진 것이라면 이는 평점이 최신여부에 영향을 미치는 것이라는 생각이 듭니다.

하지만 단순히 이런 상관관계만으로는 부족합니다.

우리는 산포도를 통해서 상관계수로는 확인하기 어려운 분포상의 특징을 살펴 볼 수 있습니다.

그러면 우선 상관관계가 가장 높은 페어들을 뽑아 봅시다.

```{python}
# 상관 관계가 0.5 이상인 쌍만 선택
threshold = 0.5
corr_matrix = number_data.corr()

# 상관 관계 쌍 추출
pairs = [(i, j, corr_matrix.at[i, j]) for i in corr_matrix.index for j in corr_matrix.columns if pd.notnull(corr_matrix.at[i, j]) and i != j]

pairs = sorted(pairs, key=lambda x: x[2], reverse=True)[::2]  # 같읂 값이 연속될 것으로 하나씩만 뽑습니다.

# 결과 출력
for pair in pairs[:10]:
    print(f"Columns: {pair[0]} & {pair[1]}, Correlation: {pair[2]:.2f}")

```

```{python}
sns.relplot(data=data, x="보증금(원)", y="월세(원)")
plt.show()
```

그래프를 보면 상당히 뚜렷하게 상관관계가 있음을 볼 수 있습니다.

하지만 각 항목별 분포와 같이 표시를 해보면 상당 부분이 낮은 값에 몰려 있음을 알 수 있습니다.

```{python}
sns.jointplot(data=data, x="보증금(원)", y="월세(원)")
plt.show()
```

아까 보았던 거주개월과 보증금와의 관계도 그려 봅시다. 상관계수는 `0.259` 정도로 어느정도 상관관계가 있음을 볼 수 있습니다.

```{python}
sns.jointplot(data=data, x="거주개월", y="보증금(원)")
plt.show()
```

하지만 그래프로 그려 보면 거주개월이 220개월 쯤에서 가장 높아 보이며 300개월 쯤 되면 오히려 하락하는 것으로 보입니다. 이는 단순히 선형 관계가 아닐 수 있음을 암시합니다.

이와 같이 단순히 상관계수 뿐만 아니라 그 산포도도 같이 살펴 봐야 함을 알 수 있습니다.

그러면 top10과 bottom10의 산포도를 그려 봅시다.

```{python}
extreme_20 = pairs[:10] + pairs[-10:]

n = len(extreme_20)
ncols = 4  # 열의 수를 지정합니다.
nrows = n//ncols + (0 if n%ncols == 0 else 1) #row 갯수를 정합니다. 딱 떨어지지 않으면 1줄을 더 추가합니다.
fig, axes = plt.subplots(nrows, ncols, figsize=(8, 8))   # 4열로 생성합니다. 
for i, (x, y, corr) in enumerate(extreme_20):
  i, j = i//4, i%4   # 위치를 잡습니다.
  ax = axes[i][j]
  sns.scatterplot(data=data, x=x, y=y, ax=ax)
  ax.set_title(f"상관계수: {corr:.2f}", size=10)
  
plt.tight_layout()
plt.show()
```

### 결측치 확인하기

**결측치 확인하기**

결측치는 데이터 세트에서 종종 발생하는 문제입니다. 결측치는 다양한 이유로 발생할 수 있으며, 결측치가 발생하면 데이터 분석에 부정적인 영향을 미칠 수 있습니다. 따라서 결측치를 확인하고 적절하게 처리하는 것이 중요합니다.

**결측치 확인 방법**

결측치를 확인하는 방법에는 여러 가지가 있습니다. 가장 간단한 방법은 데이터 세트의 각 행과 열을 살펴보고 결측치가 있는지 확인하는 것입니다. 그러나 이 방법은 데이터 세트가 큰 경우에는 시간이 많이 걸릴 수 있습니다.

결측치를 확인하는 보다 효율적인 방법은 결측치를 찾는 데 도움이 되는 통계 패키지를 사용하는 것입니다. 예를 들어, 파이썬의 pandas 패키지는 결측치를 확인하는 데 사용할 수 있는 isnull() 메서드를 제공합니다.

isnull() 메서드는 결측치가 있는 행과 열을 True로 표시합니다. 따라서 이를 더하면 어떤 컬럼에 얼마나 결측치가 있는지 알 수 있습니다.


```{python}
data.isnull().sum()
```



결측치를 확인하는 또 다른 방법은 `missingno` 패키지를 이용하는 것입니다.

```{python}
import missingno as msno

msno.matrix(data)
plt.show()
```

위의 그래프에서 볼 수 있듯이 데이터 세트의 대부분의 컬럼은 모두 값이 있으나 퇴거연도 값은 대부분 비어 있음을 알 수 있습니다. 


다음 글에서는 어떻게 대략적인 판단을 바탕으로 결측치와 이상치를 처리할지 알아보도록 하겠습니다. 